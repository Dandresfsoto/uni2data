#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django import forms
from fest_2020_ import models
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Div, Fieldset
from crispy_forms_materialize.layout import Layout, Row, Column, Submit, HTML, Button
from recursos_humanos import models as rh_models
from recursos_humanos.models import Contratistas, Contratos
from django.db.models import Q
from django.conf import settings
import openpyxl
from dal import autocomplete
from django.forms.fields import Field, FileField
from django.core.exceptions import NON_FIELD_ERRORS, ValidationError
import json
from cpe_2018.widgets import SelectWithDisabled
from django.utils import timezone
from usuarios.models import Municipios,Departamentos, Corregimientos, Veredas, PueblosIndigenas, ResguardosIndigenas, \
    ComunidadesIndigenas ,LenguasNativas, ConsejosAfro, ComunidadesAfro, CategoriaDiscapacidad, \
    DificultadesPermanentesDiscapacidad, ElementosDiscapacidad, TiposRehabilitacionDiscapacidad
from direccion_financiera.models import Bancos
from django.db.models import Sum


class CuposRutaObjectCreateForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()

        ruta = models.Rutas.objects.get(id = self.initial['pk'])

        try:
            valores_actividades = json.loads(ruta.valores_actividades)
        except:
            valores_actividades = []


        cupo_exclude = None

        if 'pk_cupo_ruta' in self.initial.keys():
            cupo_exclude = models.CuposRutaObject.objects.get(id = self.initial['pk_cupo_ruta'])


        for momento in models.Momentos.objects.filter(componente=ruta.componente).exclude(meta=0):
            maximo = valores_actividades[str('porcentaje_meta_' + str(momento.meta) + '_' + str(momento.id))]

            reportado = momento.get_progreso_reportado(ruta, cupo_exclude) + cleaned_data[f'valor_meta_{momento.meta}_{momento.id}']

            if reportado > maximo:
                self.add_error(f'valor_meta_{momento.meta}_{momento.id}', f'Este porcentaje supera el porcentaje pendiente por reportar')



    def __init__(self, *args, **kwargs):
        super(CuposRutaObjectCreateForm, self).__init__(*args, **kwargs)

        ruta = models.Rutas.objects.get(id = kwargs['initial']['pk'])

        try:
            cupo_ruta = models.CuposRutaObject.objects.get(id = kwargs['initial']['pk_cupo_ruta'])
        except:
            cupo_ruta = None

        try:
            valores_actividades = json.loads(ruta.valores_actividades)
        except:
            valores_actividades = []

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    '',
                )
            ),
            Row(

            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

        i = 0

        for meta in models.Momentos.objects.filter(componente=ruta.componente).exclude(meta=0).order_by('meta').values_list('meta', flat=True).distinct():
            ids_momentos = models.Momentos.objects.filter(componente=ruta.componente, meta=meta).exclude(meta=0).values_list('id', flat=True).distinct()

            description = ''

            if 'valor_meta_' + str(meta) in valores_actividades:
                description += '<h6><b>Valor total: </b>{0}</h6>'.format(valores_actividades['valor_meta_' + str(meta)])

            for momento in models.Momentos.objects.filter(id__in=ids_momentos):
                if str('porcentaje_meta_' + str(meta) + '_' + str(momento.id)) in valores_actividades:
                    description += '<p><b>{0}: </b>{1}%</p>'.format(momento.nombre, valores_actividades[str('porcentaje_meta_' + str(meta) + '_' + str(momento.id))])


            self.helper.layout.fields[1].fields.append(
                Column(
                    Row(
                        Fieldset(
                            'Meta {0}'.format(meta),
                        )
                    ),
                    Row(
                        HTML(
                            """
                            <div style="padding-left: 10px;">
                                {0}
                            </div>
                            """.format(description)
                        )
                    ),
                    Row(

                    ),
                    css_class='class_meta s12'
                )
            )



            for momento in models.Momentos.objects.filter(id__in=ids_momentos):

                maximo = 0

                if str('porcentaje_meta_' + str(meta) + '_' + str(momento.id)) in valores_actividades:
                    maximo = valores_actividades[str('porcentaje_meta_' + str(meta) + '_' + str(momento.id))]

                self.fields['valor_meta_' + str(meta) + '_' + str(momento.id)] = forms.IntegerField(initial=0, label='% {0}'.format(momento.nombre), widget=forms.NumberInput(
                    attrs={'min':0, 'max': maximo}
                ))

                if cupo_ruta != None:
                    self.fields['valor_meta_' + str(meta) + '_' + str(momento.id)].initial = cupo_ruta.data['valor_meta_' + str(meta) + '_' + str(momento.id)]

                progreso_reportado = momento.get_progreso_reportado(ruta, cupo_ruta)

                self.helper.layout.fields[1].fields[i].fields.append(
                    Div(
                        Row(
                            Column(
                                'valor_meta_' + str(meta) + '_' + str(momento.id),
                                css_class='s12 m6'
                            ),
                            Column(
                                HTML(
                                    """
                                    <p><b>Progreso actividad: </b>{0}%</p>
                                    <p><b>Progreso total: </b>{1}%</p>
                                    <p><b>Reportado: </b>{2}%</p>
                                    <p><b>Pendiente: </b>{3}%</p>
                                    """.format(
                                        round(momento.get_progreso_momento(ruta), 2),
                                        round(momento.get_progreso_momento_escalado(ruta, maximo), 2),
                                        round(progreso_reportado, 2),
                                        round(maximo - progreso_reportado, 2),
                                    ),
                                ),
                                css_class='s12 m6'
                            )
                        ),
                        css_class = 'row-reporte'
                    )
                )

            i += 1

    class Meta:
        model = models.CuposRutaObject
        fields = []



class HogarCreateForm(forms.ModelForm):


    def __init__(self, *args, **kwargs):
        super(HogarCreateForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Información del hogar',
                )
            ),
            Row(
                Column(
                    'documento',css_class="s12 m6 l4"
                ),
                Column(
                    'primer_nombre', css_class="s12 m6 l4"
                ),
                Column(
                    'segundo_nombre', css_class="s12 m6 l4"
                ),
            ),
            Row(
                Column(
                    'primer_apellido', css_class="s12 m6 l4"
                ),
                Column(
                    'segundo_apellido', css_class="s12 m6 l4"
                ),
                Column(
                    'fecha_nacimiento', css_class="s12 m6 l4"
                )
            ),
            Row(
                Column(
                    'municipio', css_class="s12 m6 "
                ),
                Column(
                    'municipio_residencia', css_class="s12 m6 "
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.Hogares
        fields = ['documento','municipio','primer_nombre','segundo_nombre','primer_apellido','segundo_apellido','fecha_nacimiento',
                  'municipio_residencia']
        widgets = {
        }

class HogarUpdateForm(forms.ModelForm):


    def __init__(self, *args, **kwargs):
        super(HogarUpdateForm, self).__init__(*args, **kwargs)

        self.fields['rutas'] = forms.ModelMultipleChoiceField(queryset=models.Rutas.objects.all())

        hogar = models.Hogares.objects.get(id = self.initial['pk'])

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Información del hogar',
                )
            ),
            Row(
                Column(
                    HTML("""<p>Cedula: {0}</p>""".format(hogar.documento))
                ),
            ),
            Row(
                Column(
                    'primer_nombre', css_class="s12 m6 l6"
                ),
                Column(
                    'segundo_nombre', css_class="s12 m6 l6"
                ),
            ),
            Row(
                Column(
                    'primer_apellido', css_class="s12 m6 l4"
                ),
                Column(
                    'segundo_apellido', css_class="s12 m6 l4"
                ),
                Column(
                    'fecha_nacimiento', css_class="s12 m6 l4"
                )
            ),
            Row(
                Column(
                    'municipio', css_class="s12 m6 "
                ),
                Column(
                    'municipio_residencia', css_class="s12 m6 "
                ),
            ),
            Row(
                Column(
                    'rutas', css_class="s12 m6 "
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.Hogares
        fields = ['municipio','primer_nombre','segundo_nombre','primer_apellido','segundo_apellido','fecha_nacimiento',
                  'municipio_residencia','rutas']
        widgets = {
        }

class RutasCreateForm(forms.Form):

    contrato = forms.ModelChoiceField(label='Contrato', queryset=rh_models.Contratos.objects.none())
    nombre = forms.CharField(label='Código ruta', max_length=100)
    componente = forms.ModelChoiceField(label='Componente', queryset=models.Componentes.objects.all())
    valor_transporte = forms.CharField(label='Valor reintegro de actividades',max_length=100)
    valor_otros = forms.CharField(label='Valor otros conceptos del contrato',max_length=100)
    meta = forms.IntegerField(label="Meta hogares")
    visible = forms.BooleanField(required=False)
    #tipo_pago = forms.CharField(label="Tipo de pago",widget=forms.Select(choices=[('completo','Al completar todas las actividades'),('actividad','Por actividad')]))


    def _clean_fields(self):
        for name, field in self.fields.items():
            # value_from_datadict() gets the data from the data dictionaries.
            # Each widget type knows how to retrieve its own data, because some
            # widgets split data over several HTML fields.
            if name not in ['contrato','nombre']:
                if field.disabled:
                    value = self.get_initial_for_field(field, name)
                else:
                    value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                try:
                    if isinstance(field, FileField):
                        initial = self.get_initial_for_field(field, name)
                        value = field.clean(value, initial)
                    else:
                        value = field.clean(value)

                        if name == 'nombre':
                            try:
                                models.Rutas.objects.get(nombre = value)
                            except:
                                pass
                            else:
                                self.add_error(name, 'El nombre de la ruta ya existe')

                    self.cleaned_data[name] = value
                    if hasattr(self, 'clean_%s' % name):
                        value = getattr(self, 'clean_%s' % name)()
                        self.cleaned_data[name] = value
                except ValidationError as e:
                    self.add_error(name, e)
            else:
                value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                self.cleaned_data[name] = value


    def __init__(self, *args, **kwargs):
        super(RutasCreateForm, self).__init__(*args, **kwargs)
        ruta = None

        if 'pk' in kwargs['initial']:
            ruta = models.Rutas.objects.get(id = kwargs['initial']['pk'])
            self.fields['nombre'].initial = ruta.nombre
            self.fields['contrato'].queryset = rh_models.Contratos.objects.filter(id = ruta.contrato.id)
            self.fields['contrato'].initial = ruta.contrato
            self.fields['valor_transporte'].initial = str(ruta.valor_transporte.amount)
            self.fields['valor_otros'].initial = str(ruta.valor_otros.amount)
            self.fields['componente'].initial = ruta.componente
            self.fields['meta'].initial = ruta.meta
            self.fields['visible'].initial = ruta.visible
            #self.fields['tipo_pago'].initial = ruta.tipo_pago




        else:
            self.fields['contrato'].queryset = rh_models.Contratos.objects.none()

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Información de la ruta:',
                )
            ),
            Row(
                Column(
                    'contrato',
                    css_class='s12'
                )
            ),
            Row(
                Column(
                    'nombre',
                    css_class='s12 m6'
                ),
                Column(
                    'componente',
                    css_class='s12 m6'
                )
            ),
            Row(
                Column(
                    'valor_transporte',
                    css_class='s12 m6 l4'
                ),
                Column(
                    'valor_otros',
                    css_class='s12 m6 l4'
                ),
                Column(
                    'meta',
                    css_class='s12 m6 l4'
                )
            ),
            Row(
                Column(
                    'visible',
                    css_class='s12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class ValoresActividadesForm(forms.Form):



    def clean(self):
        cleaned_data = super().clean()
        ruta = models.Rutas.objects.get(id=self.initial['pk_ruta'])

        valor_total = 0


        for meta in models.Momentos.objects.filter(componente = ruta.componente).exclude(meta=0).values_list('meta', flat=True).distinct():
            valor_total += float(cleaned_data['valor_meta_' + str(meta)].replace('$ ', '').replace(',', ''))

            ids_momentos = models.Momentos.objects.filter(componente=ruta.componente, meta=meta).exclude(meta=0).values_list('id', flat=True).distinct()

            valor_parcial = 0

            for momento in models.Momentos.objects.filter(id__in=ids_momentos):
                valor_parcial += float(cleaned_data['porcentaje_meta_' + str(meta) + '_' + str(momento.id)])


            if valor_parcial != 100:
                for momento in models.Momentos.objects.filter(id__in=ids_momentos):
                    self.add_error('porcentaje_meta_' + str(meta) + '_' + str(momento.id), "El porcentaje debe sumar 100%")


        if valor_total != float(ruta.valor.amount) - float(ruta.valor_transporte.amount) - float(ruta.valor_otros.amount):
            self.add_error(None, "El valor total de las metas debe ser $ {:20,.2f}".format(
                float(ruta.valor.amount) - float(ruta.valor_transporte.amount) - float(ruta.valor_otros.amount)))





    def __init__(self, *args, **kwargs):
        super(ValoresActividadesForm, self).__init__(*args, **kwargs)

        ruta = models.Rutas.objects.get(id = kwargs['initial']['pk_ruta'])

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Componente: {0}'.format(ruta.componente),
                )
            ),
            Row(

            ),

            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )


        initial = []

        try:
            initial = json.loads(ruta.valores_actividades)
        except:
            pass


        i = 0


        for meta in models.Momentos.objects.filter(componente = ruta.componente).exclude(meta = 0).order_by('meta').values_list('meta',flat=True).distinct():
            self.fields['valor_meta_' + str(meta)] = forms.CharField(max_length=200,  label='Valor meta {0}'.format(meta))

            if 'valor_meta_' + str(meta) in initial:
                self.fields['valor_meta_' + str(meta)].initial = initial['valor_meta_' + str(meta)]

            self.helper.layout.fields[1].fields.append(
                Column(
                    Column(
                        'valor_meta_' + str(meta),
                        css_class='s12'
                    ),
                    Row(

                    ),
                    css_class='class_meta s12'
                )
            )

            ids_momentos = models.Momentos.objects.filter(componente = ruta.componente, meta = meta).exclude(meta = 0).values_list('id',flat=True).distinct()

            for momento in models.Momentos.objects.filter(id__in = ids_momentos):
                self.fields['porcentaje_meta_' + str(meta) + '_' + str(momento.id)] = forms.IntegerField(label = 'Porcentaje: ' + momento.nombre)

                if 'porcentaje_meta_' + str(meta) + '_' + str(momento.id) in initial:
                    self.fields['porcentaje_meta_' + str(meta) + '_' + str(momento.id)].initial = initial['porcentaje_meta_' + str(meta) + '_' + str(momento.id)]

                self.helper.layout.fields[1].fields[i].fields.append(
                    Column(
                        'porcentaje_meta_' + str(meta) + '_' + str(momento.id),
                        css_class='s12 m4'
                    ),
                )

            i += 1




        """
        for momento in models.Momentos.objects.filter(componente = ruta.componente):

            self.fields['cantidad_' + str(momento.id)] = forms.IntegerField(label = 'Cantidad de soportes: {0}'.format(momento.nombre))

            if 'cantidad_' + str(momento.id) in initial:
                self.fields['cantidad_' + str(momento.id)].initial = initial['cantidad_' + str(momento.id)]


            self.fields['valor_' + str(momento.id)] = forms.CharField(max_length=200,label = 'Valor total actividades: {0}'.format(momento.nombre))




            if 'valor_' + str(momento.id) in initial:
                self.fields['valor_' + str(momento.id)].initial = initial['valor_' + str(momento.id)]



            self.helper.layout.fields[1].fields.append(
                Column(
                    Column(
                        'cantidad_' + str(momento.id),
                        css_class='s12 m6'
                    ),
                    Column(
                        'valor_' + str(momento.id),
                        css_class='s12 m6'
                    ),
                    css_class='s12'
                )
            )
        """

class RutasHogaresForm(forms.Form):

    file = forms.FileField(widget=forms.FileInput(attrs={'accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel'}))


    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'xlsx':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(RutasHogaresForm, self).__init__(*args, **kwargs)
        ruta = None

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Archivo XLSX:',
                )
            ),
            Row(
                Column(
                    'file',
                    css_class='s12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class RutasInstrumentosRechazarForm(forms.Form):

    observacion = forms.CharField(widget=forms.Textarea(attrs={'class':'materialize-textarea'}))



    def __init__(self, *args, **kwargs):
        super(RutasInstrumentosRechazarForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Observación de rechazo',
                )
            ),
            Row(
                Column(
                    'observacion',
                    css_class='s12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class CortesCreateForm(forms.Form):

    descripcion = forms.CharField(max_length = 200)

    def __init__(self, *args, **kwargs):
        super(CortesCreateForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Rutas con momentos reportados',
                )
            ),
            Row(
                Column(
                    'descripcion',
                    css_class = 's12'
                )
            ),
            Row(

            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

        rutas_ids = models.CuposRutaObject.objects.exclude(momento__tipo = 'vinculacion').filter(estado = "Reportado").values_list('ruta__id',flat=True).distinct()

        for ruta_id in rutas_ids:

            ruta = models.Rutas.objects.get(id = ruta_id)
            self.fields['ruta_' + str(ruta.id)] = forms.BooleanField(
                label = '{0} Ruta: {1} - {2}'.format('$ {:20,.2f}'.format(ruta.get_valor_corte()),ruta.nombre,ruta.contrato.contratista),
                required = False
            )
            self.fields['ruta_' + str(ruta.id)].widget.attrs['class'] = 'filled-in'

            try:
                valores_actividades = json.loads(ruta.valores_actividades)
            except:
                valores_actividades = []

            description = '<ul class="collapsible" data-collapsible="accordion" style="margin-top:30px;">'

            mid = ''

            for meta in models.Momentos.objects.filter(componente=ruta.componente).exclude(meta=0).order_by('meta').values_list('meta', flat=True).distinct():

                meta_description = """<li>
                                        <div class="collapsible-header">
                                            <i class="material-icons">attach_money</i>
                                            {0}
                                        </div>
                                        <div class="collapsible-body">
                                    """.format(f'Meta {meta}')

                for momento in models.Momentos.objects.filter(componente=ruta.componente, meta=meta).exclude(meta=0):

                    maximo = valores_actividades[str('porcentaje_meta_' + str(momento.meta) + '_' + str(momento.id))]

                    meta_description += """<div style="margin-bottom:40px;">
                                                <h6><b>{0}: </b></h6>
                                                <p>Peso: {1}%</p>
                                                <p>Progreso: {2}%</p>
                                                <p>Reportado: {3}%</p>
                                            </div>""".format(
                        momento.nombre,
                        maximo,
                        round(momento.get_progreso_momento_escalado(ruta, maximo), 2),
                        momento.get_progreso_reportado(ruta, None)
                    )


                meta_description += '</div></li>'

                mid += meta_description


            description += '{0}</ul>'.format(mid)

            self.helper.layout.fields[2].fields.append(
                Div(
                    Div(
                        Column(
                            'ruta_' + str(ruta.id),
                            css_class='s12'
                        ),
                        Column(
                            HTML(description)
                        )
                    )
                )
            )

class CuentaCobroForm(forms.Form):
    valores = forms.CharField(widget=forms.HiddenInput())
    valores_inicial = forms.CharField(widget=forms.HiddenInput())
    mes = forms.MultipleChoiceField(choices=[
        ('Enero','Enero'),
        ('Febrero', 'Febrero'),
        ('Marzo', 'Marzo'),
        ('Abril', 'Abril'),
        ('Mayo', 'Mayo'),
        ('Junio', 'Junio'),
        ('Julio', 'Julio'),
        ('Agosto', 'Agosto'),
        ('Septiembre', 'Septiembre'),
        ('Octubre', 'Octubre'),
        ('Noviembre', 'Noviembre'),
        ('Diciembre', 'Diciembre')
    ])
    year = forms.ChoiceField(label='Año')


    def __init__(self, *args, **kwargs):
        super(CuentaCobroForm, self).__init__(*args, **kwargs)

        cuenta_cobro = models.CuentasCobro.objects.get(id=kwargs['initial']['pk_cuenta_cobro'])
        fecha = timezone.now()
        year = fecha.strftime('%Y')
        year_1 = str(int(year)-1)
        mes = fecha.strftime('%B').capitalize()

        self.fields['valores_inicial'].initial = cuenta_cobro.valores_json

        self.fields['year'].choices = [(year_1,year_1),(year,year)]
        self.fields['year'].initial = year

        if cuenta_cobro.data_json == '' or cuenta_cobro.data_json == None:
            self.fields['mes'].initial = mes
        else:
            self.fields['mes'].initial = json.loads(cuenta_cobro.data_json)['mes']
            self.fields['year'].initial = json.loads(cuenta_cobro.data_json)['year']

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Cuenta de cobro',
                )
            ),
            Row(
                HTML(
                    """
                    <div class="col s12">{{ cuentas| safe }}</div>
                    """
                )
            ),
            Row(
                HTML(
                    """
                    <div class="col s12 m6"><p><b>Valor:</b> {{valor}}</p></div>
                    <div class="col s12 m6"><p><b>Corte:</b> {{corte}}</p></div>
                    <div class="col s12 m6"><p><b>Contratista:</b> {{contratista}}</p></div>
                    <div class="col s12 m6"><p><b>Contrato:</b> {{contrato}}</p></div>
                    <div class="col s12 m6"><p><b>Inicio:</b> {{inicio}}</p></div>
                    <div class="col s12 m6"><p><b>Fin:</b> {{fin}}</p></div>
                    """
                )
            ),
            Row(),
            Row(
                Column(
                    'mes',
                    css_class="s12 m6"
                ),
                Column(
                    'year',
                    css_class="s12 m6"
                ),
                Column(
                    HTML(
                        """
                        <div id="container_meses"></div>
                        """
                    ),
                    css_class="s12"
                ),
            ),
            Row(
                Column(
                    'valores',
                    'valores_inicial',
                    css_class = 's12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class CuentaCobroCargarForm(forms.ModelForm):


    def __init__(self, *args, **kwargs):
        super(CuentaCobroCargarForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Cargar cuenta de cobro',
                )
            ),
            Row(
                HTML(
                    """
                    <p style="display:inline;margin-left: 10px;"><b>Actualmente:</b>{{ file_url | safe }}</p>
                    """
                )
            ),
            Row(
                Column(
                    'file2',
                    css_class="s12"
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.CuentasCobro
        fields = ['file2']
        widgets = {
            'file2': forms.FileInput(attrs={'data-max-file-size': "50M",'accept': 'application/pdf'})
        }

class CuentaCobroEstadoForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()

        estado = cleaned_data.get("estado")
        observaciones = cleaned_data.get("observaciones")

        if estado == 'Pendiente':
            if observaciones == None or observaciones == '':
                self.add_error('observaciones', 'Por favor escriba una observación')


    def __init__(self, *args, **kwargs):
        super(CuentaCobroEstadoForm, self).__init__(*args, **kwargs)

        self.fields['estado'].widget = forms.Select(choices = [
            ('','----------'),
            ('Reportado', 'Reportado'),
            ('Pendiente', 'Pendiente'),
            ('Liquidación', 'Liquidación'),
            ('Pagado', 'Pagado')
        ])

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Cargar cuenta de cobro',
                )
            ),
            Row(
                Column(
                    'estado',
                    css_class="s12"
                ),
                Column(
                    'observaciones',
                    css_class="s12"
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.CuentasCobro
        fields = ['estado','observaciones']
        widgets = {
            'observaciones': forms.Textarea(attrs={'class': 'materialize-textarea'})
        }

class DocumentoForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(DocumentoForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento
        fields = ['file']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
        }

class FormularioCaracterizacionForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(FormularioCaracterizacionForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento de identidad',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento de identidad',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento de identidad',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.FormularioCaracterizacion
        fields = ['file','file2']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
        }

class FichaIcoeForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(FichaIcoeForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'fecha_entrada',
                        css_class='s12 m6'
                    ),
                    Column(
                        'fecha_salida',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'ESTRUCTURA DE LA ORGANIZACIÓN SOCIOPOLÍTICA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_1_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_1_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_1_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'GOBERNABILIDAD INTERNA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_2_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_2_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_2_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'IDENTIDAD Y COHESIÓN COMUNITARIAS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_3_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_3_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_3_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'DESARROLLO COMUNITARIO Y MEDIOS DE VIDA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_4_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_4_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_4_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'SUB INDICE - PERCEPCION',
                    )
                ),

                Row(
                    Column(
                        'subindice_1_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_1_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_1_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ESTRUCTURA DE LA ORGANIZACIÓN SOCIOPOLÍTICA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_5_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_5_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_5_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'GOBERNABILIDAD INTERNA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_6_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_6_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_6_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'IDENTIDAD Y COHESIÓN COMUNITARIAS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_7_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_7_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_7_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'DESARROLLO COMUNITARIO Y MEDIOS DE VIDA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_8_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_8_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_8_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'SUB INDICE DE CONDICIONES Y ATRIBUTOS',
                    )
                ),

                Row(
                    Column(
                        'subindice_2_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_2_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_2_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'COMPLEJIDAD DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'aspecto_9_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_9_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_9_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ACTORES Y FACTORES EXTERNOS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_10_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_10_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_10_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ATRIBUTOS VERIFICABLES DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'aspecto_11_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_11_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_11_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'SUBÍNDICE DE OPORTUNIDADES DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'subindice_3_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_3_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_3_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'INDICE DEL ICOE',
                    )
                ),

                Row(
                    Column(
                        'total_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'total_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'total_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),

                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'fecha_entrada',
                        css_class='s12 m6'
                    ),
                    Column(
                        'fecha_salida',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'ESTRUCTURA DE LA ORGANIZACIÓN SOCIOPOLÍTICA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_1_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_1_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_1_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'GOBERNABILIDAD INTERNA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_2_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_2_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_2_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'IDENTIDAD Y COHESIÓN COMUNITARIAS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_3_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_3_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_3_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'DESARROLLO COMUNITARIO Y MEDIOS DE VIDA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_4_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_4_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_4_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'SUB INDICE - PERCEPCION',
                    )
                ),

                Row(
                    Column(
                        'subindice_1_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_1_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_1_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ESTRUCTURA DE LA ORGANIZACIÓN SOCIOPOLÍTICA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_5_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_5_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_5_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'GOBERNABILIDAD INTERNA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_6_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_6_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_6_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'IDENTIDAD Y COHESIÓN COMUNITARIAS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_7_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_7_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_7_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'DESARROLLO COMUNITARIO Y MEDIOS DE VIDA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_8_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_8_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_8_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'SUB INDICE DE CONDICIONES Y ATRIBUTOS',
                    )
                ),

                Row(
                    Column(
                        'subindice_2_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_2_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_2_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'COMPLEJIDAD DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'aspecto_9_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_9_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_9_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ACTORES Y FACTORES EXTERNOS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_10_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_10_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_10_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ATRIBUTOS VERIFICABLES DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'aspecto_11_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_11_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_11_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'SUBÍNDICE DE OPORTUNIDADES DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'subindice_3_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_3_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_3_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'INDICE DEL ICOE',
                    )
                ),

                Row(
                    Column(
                        'total_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'total_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'total_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),

                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'fecha_entrada',
                        css_class='s12 m6'
                    ),
                    Column(
                        'fecha_salida',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'ESTRUCTURA DE LA ORGANIZACIÓN SOCIOPOLÍTICA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_1_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_1_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_1_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'GOBERNABILIDAD INTERNA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_2_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_2_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_2_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'IDENTIDAD Y COHESIÓN COMUNITARIAS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_3_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_3_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_3_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'DESARROLLO COMUNITARIO Y MEDIOS DE VIDA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_4_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_4_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_4_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'SUB INDICE - PERCEPCION',
                    )
                ),

                Row(
                    Column(
                        'subindice_1_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_1_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_1_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ESTRUCTURA DE LA ORGANIZACIÓN SOCIOPOLÍTICA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_5_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_5_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_5_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'GOBERNABILIDAD INTERNA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_6_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_6_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_6_variacion',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Fieldset(
                        'IDENTIDAD Y COHESIÓN COMUNITARIAS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_7_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_7_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_7_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'DESARROLLO COMUNITARIO Y MEDIOS DE VIDA',
                    )
                ),

                Row(
                    Column(
                        'aspecto_8_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_8_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_8_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'SUB INDICE DE CONDICIONES Y ATRIBUTOS',
                    )
                ),

                Row(
                    Column(
                        'subindice_2_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_2_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_2_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'COMPLEJIDAD DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'aspecto_9_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_9_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_9_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ACTORES Y FACTORES EXTERNOS',
                    )
                ),

                Row(
                    Column(
                        'aspecto_10_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_10_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_10_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'ATRIBUTOS VERIFICABLES DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'aspecto_11_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_11_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'aspecto_11_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'SUBÍNDICE DE OPORTUNIDADES DEL CONTEXTO',
                    )
                ),

                Row(
                    Column(
                        'subindice_3_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_3_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'subindice_3_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'INDICE DEL ICOE',
                    )
                ),

                Row(
                    Column(
                        'total_entrada',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'total_salida',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'total_variacion',
                        css_class='s12 m6 l4'
                    )
                ),

                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),

                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.FichaIcoe
        fields = ['file','file2','municipio','nombre_comunidad','resguado_indigena_consejo_comunitario','fecha_entrada',
                  'fecha_salida','aspecto_1_entrada','aspecto_1_salida','aspecto_1_variacion','aspecto_2_entrada','aspecto_2_salida',
                  'aspecto_2_variacion','aspecto_3_entrada','aspecto_3_salida','aspecto_3_variacion','aspecto_4_entrada',
                  'aspecto_4_salida','aspecto_4_variacion','subindice_1_entrada','subindice_1_salida','subindice_1_variacion',
                  'aspecto_5_entrada','aspecto_5_salida','aspecto_5_variacion','aspecto_6_entrada','aspecto_6_salida','aspecto_6_variacion',
                  'aspecto_7_entrada','aspecto_7_salida','aspecto_7_variacion','aspecto_8_entrada','aspecto_8_salida','aspecto_8_variacion',
                  'subindice_2_entrada','subindice_2_salida','subindice_2_variacion','aspecto_9_entrada','aspecto_9_salida','aspecto_9_variacion',
                  'aspecto_10_entrada','aspecto_10_salida','aspecto_10_variacion','aspecto_11_entrada','aspecto_11_salida',
                  'aspecto_11_variacion','subindice_3_entrada','subindice_3_salida','subindice_3_variacion','total_entrada','total_salida','total_variacion']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
        }

        labels = {
            'nombre_comunidad':'Nombre de la comunidad',
            'resguado_indigena_consejo_comunitario':'Resguardo / Consejo',
            'aspecto_1_entrada':'Entrada',
            'aspecto_1_salida':'Salida',
            'aspecto_1_variacion':'Variación %',
            'aspecto_2_entrada':'Entrada',
            'aspecto_2_salida':'Salida',
            'aspecto_2_variacion':'Variación %',
            'aspecto_3_entrada':'Entrada',
            'aspecto_3_salida':'Salida',
            'aspecto_3_variacion':'Variación %',
            'aspecto_4_entrada':'Entrada',
            'aspecto_4_salida':'Salida',
            'aspecto_4_variacion':'Variación %',
            'subindice_1_entrada':'Entrada',
            'subindice_1_salida':'Salida',
            'subindice_1_variacion':'Variación %',
            'aspecto_5_entrada':'Entrada',
            'aspecto_5_salida':'Salida',
            'aspecto_5_variacion':'Variación %',
            'aspecto_6_entrada':'Entrada',
            'aspecto_6_salida':'Salida',
            'aspecto_6_variacion':'Variación %',
            'aspecto_7_entrada':'Entrada',
            'aspecto_7_salida':'Salida',
            'aspecto_7_variacion':'Variación %',
            'aspecto_8_entrada':'Entrada',
            'aspecto_8_salida':'Salida',
            'aspecto_8_variacion':'Variación %',
            'subindice_2_entrada':'Entrada',
            'subindice_2_salida':'Salida',
            'subindice_2_variacion':'Variación %',
            'aspecto_9_entrada':'Entrada',
            'aspecto_9_salida':'Salida',
            'aspecto_9_variacion':'Variación %',
            'aspecto_10_entrada':'Entrada',
            'aspecto_10_salida':'Salida',
            'aspecto_10_variacion':'Variación %',
            'aspecto_11_entrada':'Entrada',
            'aspecto_11_salida':'Salida',
            'aspecto_11_variacion':'Variación %',
            'subindice_3_entrada':'Entrada',
            'subindice_3_salida':'Salida',
            'subindice_3_variacion':'Variación %',
            'total_entrada':'Entrada',
            'total_salida':'Salida',
            'total_variacion':'Variación %'
        }

class ActaSocializacionComunidadesForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(ActaSocializacionComunidadesForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'documento_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'cargo_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'fecha_firma',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'documento_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'cargo_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'fecha_firma',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'documento_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'cargo_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'fecha_firma',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.ActaSocializacionComunidades
        fields = ['file','file2','nombre_comunidad','resguado_indigena_consejo_comunitario','municipio','nombre_representante',
                  'documento_representante','cargo_representante','fecha_firma','foto1','foto2']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }

        labels = {
            'nombre_comunidad': 'Nombre de la comunidad',
            'resguado_indigena_consejo_comunitario': 'Resguardo indigena o consejo comunitario',
            'fecha_firma': 'Fecha firma del acta'
        }

class Visita_3_vmc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_3_vmc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Fotografías de la maqueta del hogar terminadas:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la maqueta del hogar terminadas:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la maqueta del hogar terminadas:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteGmail
        fields = ['file','foto1','foto2','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
        }


class DocumentoSoporteAudioForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')





    def __init__(self, *args, **kwargs):
        super(DocumentoSoporteAudioForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio
        fields = ['file','foto1','audio1']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mp3,audio/mpeg,video/mp4,audio/ogg'}),


        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1'
        }


class Visita_5_saForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')





    def __init__(self, *args, **kwargs):
        super(Visita_5_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Fotografía del participante diligenciando el formato planeador de huerta casera',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía del participante diligenciando el formato planeador de huerta casera',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía del participante diligenciando el formato planeador de huerta casera',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_6_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No hay archivos cargados')


    def __init__(self, *args, **kwargs):
        super(Visita_6_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultado del Plan de Vida del Hogar',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultado del Plan de Vida del Hogar',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultado del Plan de Vida del Hogar',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_6_pp_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No hay archivos cargados')


    def __init__(self, *args, **kwargs):
        super(Visita_6_pp_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Cuadro de costos de producción del hogar diligenciado basados en el plan de inversión',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Cuadro de costos de producción del hogar diligenciado basados en el plan de inversión',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Cuadro de costos de producción del hogar diligenciado basados en el plan de inversión',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_7_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No hay archivos cargados')


    def __init__(self, *args, **kwargs):
        super(Visita_7_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive seguimiento al PVH',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive seguimiento al PVH',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive seguimiento al PVH',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_8_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No hay archivos cargados')


    def __init__(self, *args, **kwargs):
        super(Visita_8_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video testimonial sobre arraigo y dignificación',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video testimonial sobre arraigo y dignificación',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video testimonial sobre arraigo y dignificación',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_9_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No hay archivos cargados')


    def __init__(self, *args, **kwargs):
        super(Visita_9_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización salida FSC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización salida FSC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización salida FSC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_5_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Visita_5_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Aplicación PVH 1.1 V5',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Aplicación PVH 1.1 V5',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Aplicación PVH 1.1 V5',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteAudio3
        fields = ['file','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }


class Visita_4_saForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Visita_4_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografias de Huerta en estado de avance con participantes ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                 Row(
                    Fieldset(
                        'Fotografia clara del plan de actividades de la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografias de Huerta en estado de avance con participantes ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografia clara del plan de actividades de la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografias de Huerta en estado de avance con participantes ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografia clara del plan de actividades de la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotos2Audio3
        fields = ['file','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/ogg,video/mp4,video/3gpp'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/ogg,video/mp4,video/3gpp'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/ogg,video/mp4,video/3gpp'}),

        }
        labels = {
            'file': 'file 1',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }




class Taller_2_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")




        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')





    def __init__(self, *args, **kwargs):
        super(Taller_2_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Eleccion de líderes, selección lugar HC)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (Puede cargar en excel o pdf)',
                    )
                ),
                Row(
                    Fieldset(
                        'pdf',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'excel',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Líderes/Colíderes FEST:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Eleccion de líderes, selección lugar HC)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (Puede cargar en excel o pdf)',
                    )
                ),
                Row(
                    Fieldset(
                        'pdf',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'excel',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Eleccion de líderes, selección lugar HC)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (Puede cargar en excel o pdf)',
                    )
                ),
                Row(
                    Fieldset(
                        'pdf',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'excel',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Líderes/Colíderes FEST:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Taller_2_fsc
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','foto4','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,video/M4A,audio/M4A,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Eleccion de líderes, selección lugar HC)',
            'file2': 'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
            'file3': 'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
            'file4': 'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
            'foto1': 'Soporte',
            'foto2': 'Foto',
            'foto3': 'Foto',
            'foto4': 'Foto',
            'audio': 'Audio',
        }

class Taller_2_saForm(forms.ModelForm):


    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")



        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_2_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Eleccion de líderes, selección lugar HC):',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    ),
                ),
                 Row(
                    Fieldset(
                        'Gforms Selección líder / lideresa de seguridad Alimentaria y datos de la huerta comunitaria ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI Huerta Comunitaria EXCEL ANDES (JPG)',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria):',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (Puede cargar pdf o excel)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Gforms Selección líder / lideresa de seguridad Alimentaria y datos de la huerta comunitaria :',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI Huerta Comunitaria EXCEL ANDES:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria):',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (Puede cargar pdf o excel)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Gforms Selección líder / lideresa de seguridad Alimentaria y datos de la huerta comunitaria:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI Huerta Comunitaria EXCEL ANDES:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

    class Meta:
        model = models.Taller_2_sa
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','foto4','foto5','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,video/M4A,audio/M4A,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria)',
            'file2': 'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
            'file3': 'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
            'file4': 'FLA - 01 Lista exel participantes encuentro(aplica para metodología virtual)',
            'foto1': 'Soporte',
            'foto2': 'Soporte',
            'foto3': 'Foto',
            'foto4': 'Foto',
            'foto5': 'Foto',
            'audio': 'Audio',

        }

class Taller_2_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")




        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')







    def __init__(self, *args, **kwargs):
        super(Taller_2_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar HC)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)(puede cargar excel ó pdf)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    ),
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive DOFA:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Perfil Productivo',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar HC)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)(puede cargar excel ó pdf)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive DOFA:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Perfil Productivo',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar HC)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)(puede cargar excel ó pdf)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive DOFA:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Perfil Productivo',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Taller_2_sa
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','foto4','foto5','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,video/M4A,audio/M4A,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria)',
            'file2': 'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
            'file3': 'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
            'file4': 'FLA - 01 Lista exel participantes encuentro(aplica para metodología virtual)',
            'foto1': 'Soporte',
            'foto2': 'Soporte',
            'foto3': 'Foto',
            'foto4': 'Foto',
            'foto5': 'Foto',
            'audio': 'Audio',

        }

class Taller_2_vmcForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')






    def __init__(self, *args, **kwargs):
        super(Taller_2_vmcForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria):',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (Puede cargar pdf o excel)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Plan de inversion firmado(PDF)  (Opcional):',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de inversion firmado(Rar o Zip) (Opcional):',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Identificación de sistemas constructivos en la región:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Feria de Proveeduría:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria):',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (Puede cargar pdf o excel)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Plan de inversion firmado(PDF)  (Opcional):',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de inversion firmado(Rar o Zip)  (Opcional):',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Identificación de sistemas constructivos en la región:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Feria de Proveeduría:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria):',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales):',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (Puede cargar pdf o excel)',
                    )
                ),
                Row(
                    Fieldset(
                        'PDF',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'EXCEL',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Plan de inversion firmado(PDF)  (Opcional):',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de inversion firmado(Rar o Zip)  (Opcional):',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Identificación de sistemas constructivos en la región:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Feria de Proveeduría:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Taller:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada del Taller:',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Taller_2_vmc
        fields = ['file','file2','file3','file4','file5','file6','foto1','foto2','foto3','foto4','foto5','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/x-zip-compressed,x-rar'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,video/M4A,audio/M4A,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'F-GI-IP-13 Formato de acta de reunión (Priorización IFC, Elección de líderes, selección lugar Huerta Comunitaria)',
            'file2': 'F-GI-IP-19 Lista Asistencia Encuentro FEST (aplica para encuentros presenciales)',
            'file3': 'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
            'file4': 'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
            'file5': 'file5',
            'file6': 'FLA - 01 Lista exel participantes encuentro(aplica para metodología virtual)',
            'foto1': 'Soporte',
            'foto2': 'Soporte',
            'foto3': 'Foto',
            'foto4': 'Foto',
            'foto5': 'Foto',
            'audio': 'Audio',

        }


class Visita_4_vmcForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_4_vmcForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mejoras en Hábitos ambientales',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de mejoras en hábitos saludables',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mejoras en Hábitos ambientales',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de mejoras en hábitos saludables',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mejoras en Hábitos ambientales',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de mejoras en hábitos saludables',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotos2Audio3
        fields = ['file','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class DispersionyprooveduriaForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(DispersionyprooveduriaForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Asistencia y apoyo en la Feria de Proveeduría VMC (certificada por la coordinación)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Fotografías del evento',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Asistencia y apoyo en la Feria de Proveeduría VMC (certificada por la coordinación)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías del evento',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Asistencia y apoyo en la Feria de Proveeduría VMC (certificada por la coordinación)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías del evento',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2Fotos2Audio3
        fields = ['file','foto1','foto2','foto3','foto4','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_7_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_7_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-94 Plan de inversión firmado versión final',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Aprendizajes obtenidos del componente',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización Salida VMC',
                    ),
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías estado del hogar después de las mejoras',
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion Llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-94 Plan de inversión firmado versión final',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Aprendizajes obtenidos del componente',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización Salida VMC',
                    ),
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías estado del hogar después de las mejoras',
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion Llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Aprendizajes obtenidos del componente',
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-94 Plan de inversión firmado versión final',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización Salida VMC',
                    ),
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías estado del hogar después de las mejoras',
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion Llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2Fotos2Audio3
        fields = ['file','file2','foto1','foto2','foto3','foto4','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_7_pp_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No posee ningun archivo cargado')



    def __init__(self, *args, **kwargs):
        super(Visita_7_pp_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento GDrive  2 compradores por línea productiva Rueda de Negocios',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento GDrive  participantes Rueda de Negocios Definitiva',
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion Llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento GDrive  2 compradores por línea productiva Rueda de Negocios',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento GDrive  participantes Rueda de Negocios Definitiva',
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion Llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento GDrive  2 compradores por línea productiva Rueda de Negocios',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento GDrive  participantes Rueda de Negocios Definitiva',
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion Llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2Fotos2Audio3
        fields = ['file','foto1','foto2','foto3','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }



class DocumentoSoporte2FotosAudio3Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(DocumentoSoporte2FotosAudio3Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(

                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotos2Audio3
        fields = ['file','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_7_saForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_7_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización Salida SA',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de Huerta casera implementada con el hogar en la huerta casera',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización Salida SA',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de Huerta casera implementada con el hogar en la huerta casera',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización Salida SA',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de Huerta casera implementada con el hogar en la huerta casera',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotos2Audio3
        fields = ['file','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class DocumentoSoporte2Fotos2Audio3Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(DocumentoSoporte2Fotos2Audio3Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2Fotos2Audio3
        fields = ['file','foto1','foto2','foto3','foto4','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class HuertacomunitariaForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(HuertacomunitariaForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Participación en la entrega de la huerta (certificada por la coordinación)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Fotografías de la entrega',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Participación en la entrega de la huerta (certificada por la coordinación)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Participación en la entrega de la huerta (certificada por la coordinación)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2Fotos2Audio3
        fields = ['file','foto1','foto2','foto3','foto4','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class DocumentoSoporteFotosAudio3Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(DocumentoSoporteFotosAudio3Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotosAudio3
        fields = ['file','foto1','foto2','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_9_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No se ha cargado ningun archivo')



    def __init__(self, *args, **kwargs):
        super(Visita_9_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización salida PP',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Pantallazo email coordinador validando entrega de 100% de gestión documental',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización salida PP',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Pantallazo email coordinador validando entrega de 100% de gestión documental',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Caracterización salida PP',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Pantallazo email coordinador validando entrega de 100% de gestión documental',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotosAudio3
        fields = ['file','foto1','foto2','audio1' ,'audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class FichaVisionDesarrolloForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(FichaVisionDesarrolloForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6'
                    )
                ),

                Row(
                    Column(
                        'dependencia',
                        css_class='s12 m6'
                    ),
                    Column(
                        'asistentes',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6'
                    )
                ),

                Row(
                    Column(
                        'dependencia',
                        css_class='s12 m6'
                    ),
                    Column(
                        'asistentes',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6'
                    )
                ),

                Row(
                    Column(
                        'dependencia',
                        css_class='s12 m6'
                    ),
                    Column(
                        'asistentes',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.FichaVisionDesarrollo
        fields = ['file','file2','foto1','foto2','municipio','fecha','lugar','dependencia','asistentes']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
                        'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }

        labels = {
            'dependencia':'Dependencia a cargo',
        }

class DiagnosticoComunitarioForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")
        file3 = cleaned_data.get("file3")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')

        if file3.name.split('.')[-1] == 'pdf' or file3.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file3', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(DiagnosticoComunitarioForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6'
                    )
                ),

                Row(
                    Column(
                        'dependencia',
                        css_class='s12 m6'
                    ),
                    Column(
                        'asistentes',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de diagnostico:',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6'
                    )
                ),

                Row(
                    Column(
                        'dependencia',
                        css_class='s12 m6'
                    ),
                    Column(
                        'asistentes',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de diagnostico:',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6'
                    )
                ),

                Row(
                    Column(
                        'dependencia',
                        css_class='s12 m6'
                    ),
                    Column(
                        'asistentes',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de diagnostico:',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DiagnosticoComunitario
        fields = ['file','file2', 'file3','foto1','foto2','municipio','fecha','lugar','dependencia','asistentes']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }

        labels = {
            'dependencia':'Dependencia a cargo',
        }

class ActaSocializacionConcertacionForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(ActaSocializacionConcertacionForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'fecha_diligenciamiento',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'hora',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    ),
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'datos_contacto_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada:',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento escaneado:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'fecha_diligenciamiento',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'hora',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    ),
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'datos_contacto_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada:',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento escaneado:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'fecha_diligenciamiento',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'lugar',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'hora',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6'
                    ),
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'datos_contacto_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada:',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento escaneado:',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.ActaSocializacionConcertacion
        fields = ['fecha_diligenciamiento','lugar','hora','municipio','resguado_indigena_consejo_comunitario','nombre_comunidad',
                  'nombre_representante','datos_contacto_representante','file','file2','foto1','foto2']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }

        labels = {
            'fecha_diligenciamiento': 'Fecha de diligenciamiento',
            'lugar': 'Lugar',
            'hora': 'Hora',
            'municipio': 'Municipio',
            'resguado_indigena_consejo_comunitario': 'Resguardo / Consejo',
            'nombre_comunidad': 'Nombre de la comunidad',
            'nombre_representante': 'Nombre interlocutor de la comunidad',
            'datos_contacto_representante': 'Datos de contacto',
            'file': 'Acta',
            'file2': 'Listado de asistencia',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2'
        }

class ActaVinculacionHogarForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(ActaVinculacionHogarForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'fecha_diligenciamiento',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'tipo_identificacion',
                        css_class='s12 m6'
                    ),
                    Column(
                        'documento_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'telefono_celular',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento de identidad',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'fecha_diligenciamiento',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'tipo_identificacion',
                        css_class='s12 m6'
                    ),
                    Column(
                        'documento_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'telefono_celular',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento de identidad',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'fecha_diligenciamiento',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'nombre_comunidad',
                        css_class='s12 m6 l4'
                    ),
                    Column(
                        'resguado_indigena_consejo_comunitario',
                        css_class='s12 m6 l4'
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'tipo_identificacion',
                        css_class='s12 m6'
                    ),
                    Column(
                        'documento_representante',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Column(
                        'nombre_representante',
                        css_class='s12 m6'
                    ),
                    Column(
                        'telefono_celular',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta escaneada',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento de identidad',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.ActaVinculacionHogar
        fields = ['file','file2','fecha_diligenciamiento','municipio','resguado_indigena_consejo_comunitario','nombre_comunidad',
                  'tipo_identificacion','documento_representante','nombre_representante','telefono_celular']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
        }

        labels = {
            'nombre_comunidad': 'Nombre de la comunidad',
            'resguado_indigena_consejo_comunitario': 'Resguardo indigena o consejo comunitario',
        }

class DocumentoExcelForm(forms.Form):

    file = forms.FileField(widget=forms.FileInput(attrs={'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}))


    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'xlsx' or file.name.split('.')[-1] == 'xls':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(DocumentoExcelForm, self).__init__(*args, **kwargs)
        ruta = None

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'file',
                    css_class='s12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class Fotos4Form(forms.Form):

    foto1 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto2 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto3 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),required=False)
    foto4 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),required=False)


    def clean(self):
        cleaned_data = super().clean()
        foto1 = cleaned_data.get("foto1")
        foto2 = cleaned_data.get("foto2")
        foto3 = cleaned_data.get("foto3")
        foto4 = cleaned_data.get("foto4")

        if foto1.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto1', 'El archivo cargado no tiene un formato valido')

        if foto2.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto2', 'El archivo cargado no tiene un formato valido')


        if foto3 != None:
            if foto3.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto3', 'El archivo cargado no tiene un formato valido')

        if foto4 != None:
            if foto4.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto4', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Fotos4Form, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'foto1',
                    css_class='s12 m6'
                ),
                Column(
                    'foto2',
                    css_class='s12 m6'
                ),
                Column(
                    'foto3',
                    css_class='s12 m6'
                ),
                Column(
                    'foto4',
                    css_class='s12 m6'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class Fotos2Form(forms.Form):

    foto1 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto2 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))


    def clean(self):
        cleaned_data = super().clean()
        foto1 = cleaned_data.get("foto1")
        foto2 = cleaned_data.get("foto2")

        if foto1.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto1', 'El archivo cargado no tiene un formato valido')

        if foto2.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto2', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Fotos2Form, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'foto1',
                    css_class='s12 m6'
                ),
                Column(
                    'foto2',
                    css_class='s12 m6'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class Fotos5Form(forms.Form):

    foto1 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto2 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto3 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto4 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto5 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))


    def clean(self):
        cleaned_data = super().clean()
        foto1 = cleaned_data.get("foto1")
        foto2 = cleaned_data.get("foto2")
        foto3 = cleaned_data.get("foto3")
        foto4 = cleaned_data.get("foto4")
        foto5 = cleaned_data.get("foto5")

        if foto1.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto1', 'El archivo cargado no tiene un formato valido')

        if foto2.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto2', 'El archivo cargado no tiene un formato valido')


        if foto3 != None:
            if foto3.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto3', 'El archivo cargado no tiene un formato valido')

        if foto4 != None:
            if foto4.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto4', 'El archivo cargado no tiene un formato valido')

        if foto5 != None:
            if foto5.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto5', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Fotos5Form, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'foto1',
                    css_class='s12 m6'
                ),
                Column(
                    'foto2',
                    css_class='s12 m6'
                ),
                Column(
                    'foto3',
                    css_class='s12 m6'
                ),
                Column(
                    'foto4',
                    css_class='s12 m6'
                ),
                Column(
                    'foto5',
                    css_class='s12 m6'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class Fotos6Form(forms.Form):

    foto1 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto2 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto3 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto4 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto5 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))
    foto6 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))


    def clean(self):
        cleaned_data = super().clean()
        foto1 = cleaned_data.get("foto1")
        foto2 = cleaned_data.get("foto2")
        foto3 = cleaned_data.get("foto3")
        foto4 = cleaned_data.get("foto4")
        foto5 = cleaned_data.get("foto5")
        foto6 = cleaned_data.get("foto6")

        if foto1.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto1', 'El archivo cargado no tiene un formato valido')

        if foto2.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto2', 'El archivo cargado no tiene un formato valido')


        if foto3 != None:
            if foto3.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto3', 'El archivo cargado no tiene un formato valido')

        if foto4 != None:
            if foto4.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto4', 'El archivo cargado no tiene un formato valido')

        if foto5 != None:
            if foto5.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto5', 'El archivo cargado no tiene un formato valido')

        if foto6 != None:
            if foto6.name.split('.')[-1] in ['jpg','jpeg','png']:
                pass
            else:
                self.add_error('foto6', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Fotos6Form, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'foto1',
                    css_class='s12 m6'
                ),
                Column(
                    'foto2',
                    css_class='s12 m6'
                ),
                Column(
                    'foto3',
                    css_class='s12 m6'
                ),
                Column(
                    'foto4',
                    css_class='s12 m6'
                ),
                Column(
                    'foto5',
                    css_class='s12 m6'
                ),
                Column(
                    'foto6',
                    css_class='s12 m6'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class Fotos1Form(forms.Form):

    foto1 = forms.FileField(widget=forms.FileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}))


    def clean(self):
        cleaned_data = super().clean()
        foto1 = cleaned_data.get("foto1")

        if foto1.name.split('.')[-1] in ['jpg','jpeg','png']:
            pass
        else:
            self.add_error('foto1', 'El archivo cargado no tiene un formato valido')




    def __init__(self, *args, **kwargs):
        super(Fotos1Form, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'foto1',
                    css_class='s12 m6'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class CaracterizacionInicialForm(forms.Form):
    # -------------------------------------------------------------

    # lugar de atencion
    departamento_atencion = forms.ModelChoiceField(label='Departamento de atención*',queryset=Departamentos.objects.all(),required=False)
    municipio_atencion = forms.ModelChoiceField(label='Municipio de atención*',queryset=Municipios.objects.none(),required=False)


    # residencia
    departamento_residencia = forms.ModelChoiceField(label='Departamento de residencia*',queryset=Departamentos.objects.all(),required=False)
    municipio_residencia = forms.ModelChoiceField(label='Municipio de residencia*', queryset=Municipios.objects.none(),required=False)
    zona_residencia = forms.CharField(label="Zona de residencia*",widget=forms.Select(choices=[
        ('', '----------'),
        ('Cabecera municipal','Cabecera municipal'),
        ('Centro poblado', 'Centro poblado'),
        ('Rural disperso', 'Rural disperso')
    ]),required=False)

    localidad = forms.CharField(max_length=1000,required=False)
    barrio = forms.CharField(label="Barrio*",max_length=1000,required=False)
    direccion_predio = forms.CharField(label="Dirección del predio*",max_length=1000,required=False)

    corregimiento = forms.ModelChoiceField(label='Corregimiento',queryset=Corregimientos.objects.none(),required=False)
    vereda = forms.ModelChoiceField(label='Vereda', queryset=Veredas.objects.none(),required=False)
    ubicacion_predio = forms.CharField(label="Ubicación del predio*",max_length=1000,required=False)

    telefono_fijo = forms.CharField(max_length=100,required=False)
    tipo_vivienda = forms.CharField(label="Tipo de vivienda*",widget=forms.Select(choices=[
        ('', '----------'),
        ('Casa Lote', 'Casa Lote'),
        ('Vivienda (Casa) Indigena', 'Vivienda (Casa) Indigena'),
        ('Casa', 'Casa'),
        ('Apartamento', 'Apartamento'),
        ('Cuarto(s) Inquilinato', 'Cuarto(s) Inquilinato'),
        ('Albergue', 'Albergue'),
        ('Otro tipo de Vivienda (Carpa, Tienda, Vagon, Embarcacion, Cueva, Refugio Natural, Puente, etc,) Cual?', 'Otro tipo de Vivienda (Carpa, Tienda, Vagon, Embarcacion, Cueva, Refugio Natural, Puente, etc,) Cual?'),
        ('Cuarto(s) en otro tipo de estructura', 'Cuarto(s) en otro tipo de estructura')
    ]),required=False)
    otro_tipo_vivienda = forms.CharField(label="Otro tipo de vivienda, cual?",max_length=100,required=False)

    propiedad_vivienda = forms.CharField(label="Propiedad de la vivienda*",widget=forms.Select(choices=[
        ('', '----------'),
        ('Propia Totalmente Pagada', 'Propia Totalmente Pagada'),
        ('En Arriendo o SubArriendo', 'En Arriendo o SubArriendo'),
        ('Colectiva', 'Colectiva'),
        ('Propia, la estan pagando', 'Propia, la estan pagando'),
        ('En Usufructo', 'En Usufructo'),
        ('Posesion Sin Titulo','Posesion Sin Titulo')
    ]),required=False)
    estrato_vivienda = forms.CharField(widget=forms.Select(choices=[
        ('', '----------'),
        ('Estrato 0', 'Estrato 0'),
        ('Estrato 1', 'Estrato 1'),
        ('Estrato 2', 'Estrato 2'),
        ('Estrato 3', 'Estrato 3'),
        ('Estrato 4', 'Estrato 4'),
        ('Estrato 5', 'Estrato 5'),
        ('Estrato 6', 'Estrato 6'),
    ]),required=False)

    # -------------------------------------------------------------

    # Georreferenciación

    longitud = forms.DecimalField(label="Longitud*",max_digits=15,decimal_places=10,required=False)
    latitud = forms.DecimalField(label="Latitud*",max_digits=15, decimal_places=10, required=False)
    precision = forms.DecimalField(label="Precisión*",max_digits=15, decimal_places=10, required=False)
    altitud = forms.DecimalField(label="Altitud*",max_digits=15, decimal_places=10, required=False)

    # -------------------------------------------------------------

    # información sobre la familia

    otro_telefono = forms.CharField(label="Otro telefono",max_length=100, required=False)
    descripcion_direccion = forms.CharField(label="Descripción dirección",max_length=100, required=False)
    numero_personas_familia = forms.IntegerField(label="Numero de personas*",initial=1,required=False,widget=forms.NumberInput(attrs={'min':1}))

    menores_5_anios = forms.IntegerField(label="Menores de 5 años*",initial=0,required=False,widget=forms.NumberInput(attrs={'min':0}))
    mayores_60_anios = forms.IntegerField(label="Mayores de 60 años*",initial=0,required=False,widget=forms.NumberInput(attrs={'min':0}))

    mujeres_gestantes_lactantes = forms.IntegerField(label="Mujeres gestantes o lactantes*",initial=0,required=False,widget=forms.NumberInput(attrs={'min':0}))
    discapacitados_familia = forms.IntegerField(label="Personas en condición de discapacidad*",initial=0,required=False,widget=forms.NumberInput(attrs={'min':0}))

    # -------------------------------------------------------------

    # Datos personales

    tipo_documento = forms.CharField(label="Tipo de documento*",max_length=100,widget=forms.Select(choices=[
        ('', '----------'),
        ('Cedula de ciudadania', 'Cedula de ciudadania'),
        ('Tarjeta de identidad', 'Tarjeta de identidad'),
        ('Cedula de extranjeria', 'Cedula de extranjeri'),
        ('Registro civil', 'Registro civil'),
        ('NIT', 'NIT'),
        ('SIN', 'SIN'),
        ('Registro civil de defunción', 'Registro civil de defunción'),
        ('Libreta militar', 'Libreta militar'),
        ('Matricula mercantil', 'Matricula mercantil'),
        ('Pasaporte', 'Pasaporte'),
        ('Indocumentado', 'Indocumentado'),
        ('Ninguno', 'Ninguno'),
        ('Otro', 'Otro'),
        ('PB', 'PB'),
        ('SR', 'SR'),
        ('Cedula militar', 'Cedula militar'),
    ]), required=False)

    numero_documento = forms.IntegerField(label="Número de documento*",required=False)

    primer_apellido = forms.CharField(label="Primer apellido*",max_length=100,required=False)
    segundo_apellido = forms.CharField(max_length=100, required=False)
    primer_nombre = forms.CharField(label="Primer nombre",max_length=100,required=False)
    segundo_nombre = forms.CharField(max_length=100, required=False)

    celular_1 = forms.CharField(label="Celular 1*",max_length=100,required=False)
    celular_2 = forms.CharField(max_length=100, required=False)
    correo_electronico = forms.EmailField(max_length=100, required=False)

    # Lugar y fecha de nacimiento

    departamento_nacimiento = forms.ModelChoiceField(label='Departamento de nacimiento*',queryset=Departamentos.objects.all(), required=False)
    municipio_nacimiento = forms.ModelChoiceField(label='Municipio de nacimiento*', queryset=Municipios.objects.none(),required=False)
    fecha_nacimiento = forms.DateField(label="Fecha de nacimiento*",widget=forms.TextInput(attrs={'class':'datepicker'}),required=False)

    # Lugar y fecha de expedición del documento

    departamento_expedicion = forms.ModelChoiceField(label='Departamento de expedición*',queryset=Departamentos.objects.all(), required=False)
    municipio_expedicion = forms.ModelChoiceField(label='Municipio de expedición*', queryset=Municipios.objects.none(),required=False)
    fecha_expedicion = forms.DateField(label="Fecha de expedición*",widget=forms.TextInput(attrs={'class':'datepicker'}),required=False)

    # -------------------------------------------------------------

    # Caracteristicas geenrales

    sexo = forms.CharField(label="Sexo*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('I O Intersexual', 'I O Intersexual'),
        ('Mujer', 'Mujer'),
        ('Hombre', 'Hombre')
    ]), required=False)
    tiene_libreta = forms.BooleanField(label="¿Tiene libreta militar?",initial=False,required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    numero_libreta = forms.CharField(label="Número de libreta militar*", required=False)
    identidad_genero = forms.CharField(label="Identidad de género", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Masculino', 'Masculino'),
        ('Femenino', 'Femenino'),
        ('Mujer transexual', 'Mujer transexual'),
        ('Hombre transexual', 'Hombre transexual')
    ]), required=False)
    condicion_sexual = forms.CharField(label="Condición sexual", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Bisexual', 'Bisexual'),
        ('Gay', 'Gay'),
        ('Lesbiana', 'Lesbiana'),
        ('Heterosexual', 'Heterosexual'),
        ('ND', 'ND')
    ]), required=False)
    estado_civil = forms.CharField(label="Estado civil*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('No reporta', 'No reporta'),
        ('Divorciado(a)', 'Divorciado(a)'),
        ('Casado(a)', 'Casado(a)'),
        ('Soltero(a)', 'Soltero(a)'),
        ('Viudo(a)', 'Viudo(a)'),
        ('Viudo(a)', 'Viudo(a)'),
        ('Union libre', 'Union libre'),
        ('Vive en pareja hace menos de 2 años', 'Vive en pareja hace menos de 2 años')
    ]), required=False)

    etnia = forms.CharField(label="Étnia*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Rom / Gitano', 'Rom / Gitano'),
        ('Indigena', 'Indigena'),
        ('Palanquero', 'Palanquero'),
        ('Afrocolombiano / Negro', 'Afrocolombiano / Negro'),
        ('Raizal', 'Raizal'),
        ('Ninguno de los anteriores', 'Ninguno de los anteriores')
    ]), required=False)

    pueblo_indigena = forms.ModelChoiceField(label='Pueblo indigena',queryset=PueblosIndigenas.objects.all().order_by('nombre'), required=False)
    resguardo_indigena = forms.ModelChoiceField(label='Resguardo indigena', queryset=ResguardosIndigenas.objects.all().order_by('nombre'),required=False)
    comunidad_indigena = forms.ModelChoiceField(label='Comunidad indigena', queryset=ComunidadesIndigenas.objects.all().order_by('nombre'),required=False)
    lengua_nativa_indigena = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    cual_lengua_indigena = forms.ModelChoiceField(label='Lengua nativa', queryset=LenguasNativas.objects.all().order_by('nombre'),required=False)

    consejo_afro = forms.ModelChoiceField(label='Consejo afro', queryset=ConsejosAfro.objects.all(),required=False)
    comunidad_afro = forms.ModelChoiceField(label='Comunidad afro', queryset=ComunidadesAfro.objects.all(),required=False)
    lengua_nativa_afro = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    cual_lengua_afro = forms.ModelChoiceField(label='Lengua nativa', queryset=LenguasNativas.objects.all(),required=False)

    discapacidad = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))

    registro_discapacidad = forms.CharField(label="Tiene registro de discapacidad?", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Si', 'Si'),
        ('No', 'No'),
        ('No sabe', 'No sabe')
    ]), required=False)
    categoria_discapacidad = forms.MultipleChoiceField(label='Categoria discapacidad', choices=CategoriaDiscapacidad.objects.all().values_list('id','nombre'), required=False)
    dificultades_permanentes = forms.MultipleChoiceField(label='Dificualtades permanentes para', choices=DificultadesPermanentesDiscapacidad.objects.all().values_list('id','nombre'), required=False)

    utiliza_actualmente = forms.MultipleChoiceField(label='Utiliza actualmente algun dispositivo de apoyo',choices=ElementosDiscapacidad.objects.all().values_list('id','nombre'),required=False)
    rehabilitacion = forms.MultipleChoiceField(label='Esta en rehabilitación?',choices=TiposRehabilitacionDiscapacidad.objects.all().values_list('id', 'nombre'), required=False)


    tiene_cuidador = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))

    cuidador = forms.CharField(label="Quién es el cuidador?", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Algun pariente del hogar', 'Algun pariente del hogar'),
        ('Pariente en otro lugar', 'Pariente en otro lugar'),
        ('No pariente en otro lugar', 'No pariente en otro lugar')
    ]), required=False)
    parentezco = forms.CharField(label="Parentesco*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('No reporta', 'No reporta'),
        ('Hijastro(a)', 'Hijastro(a)'),
        ('Jefe(a) o Cabeza del hogar', 'Jefe(a) o Cabeza del hogar'),
        ('Pareja, Esposo(a), Conyugue o compañero(a)', 'Pareja, Esposo(a), Conyugue o compañero(a)'),
        ('Hijo(a)', 'Hijo(a)'),
        ('Yerno/Nuera', 'Yerno/Nuera'),
        ('Nieto(a)', 'Nieto(a)'),
        ('Padres(Padre/Madre)', 'Padres(Padre/Madre)'),
        ('Suegro(a)', 'Suegro(a)'),
        ('Hermanos(Hermano(a))', 'Hermanos(Hermano(a))'),
        ('Otro pariente', 'Otro pariente'),
        ('Abuelos(Abuelo(a))', 'Abuelos(Abuelo(a))'),
        ('Tios', 'Tios'),
        ('Sobrinos', 'Sobrinos'),
        ('Primos', 'Primos'),
        ('Otros no parientes', 'Otros no parientes'),
        ('Cuñados(Cuñado(a))', 'Cuñados(Cuñado(a))')
    ]), required=False)
    es_jefe = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    es_representante_hogar = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))

    bancarizacion = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    banco = forms.ModelChoiceField(label='Banco*',queryset=Bancos.objects.all(), required=False)
    tipo_cuenta = forms.CharField(label="Tipo cuenta*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Cuenta de ahorros', 'Cuenta de ahorros'),
        ('Cuenta corriente', 'Cuenta corriente')
    ]), required=False)
    numero_cuenta = forms.CharField(label="Número de cuenta*", max_length=100, required=False)


    nivel_escolaridad = forms.CharField(label="Nivel escolaridad*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('Técnica profesional', 'Técnica profesional'),
        ('Tecnológico', 'Tecnológico'),
        ('Profesional', 'Profesional'),
        ('Especialización', 'Especialización'),
        ('Curso largo SENA 400 HR', 'Curso largo SENA 400 HR'),
        ('Certificación habilidades SENA', 'Certificación habilidades SENA'),
        ('Curso corto SENA 40 HR', 'Curso corto SENA 40 HR'),
        ('Maestría', 'Maestría'),
        ('Preescolar', 'Preescolar'),
        ('Básica primaria(1-5)', 'Básica primaria(1-5)'),
        ('Básica secundaria(6-9)', 'Básica secundaria(6-9)'),
        ('Media(10-13)', 'Media(10-13)'),
        ('Ninguno', 'Ninguno')
    ]), required=False)
    grado_titulo = forms.CharField(label="Grado o Título alcanzado*", max_length=100, required=False)

    sabe_leer = forms.BooleanField(label="¿Sabe leer y escribir?",initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    sabe_sumar_restar = forms.BooleanField(label="¿Sabe sumar y restar?",initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    actualmente_estudia = forms.BooleanField(label="¿Actualmente Estudia?",initial=False, required=False,widget=forms.CheckboxInput(attrs={'class':'filled-in checkboxinput'}))
    recibe_alimentos = forms.BooleanField(initial=False, required=False,widget=forms.CheckboxInput(attrs={'class': 'filled-in checkboxinput'}))


    razon_no_estudia = forms.CharField(label="Razón por la cuál no estudia*", max_length=100, widget=forms.Select(choices=[
        ('', '----------'),
        ('No tiene interés en estudiar', 'No tiene interés en estudiar'),
        ('Considera que no está en edad escolar', 'Considera que no está en edad escolar'),
        ('Insuficiencia de recursos', 'Insuficiencia de recursos'),
        ('Prefiere trabajar', 'Prefiere trabajar'),
        ('Debe encargarse del hogar', 'Debe encargarse del hogar'),
        ('Lejanía del establecimiento educativo', 'Lejanía del establecimiento educativo'),
        ('Por inseguridad en el entorno', 'Por inseguridad en el entorno'),
        ('Tuvieron que abandonar el lugar de residencia actual', 'Tuvieron que abandonar el lugar de residencia actual'),
        ('Necesita educación especial', 'Necesita educación especial'),
        ('Por matoneo escolar', 'Por matoneo escolar'),
        ('Por embarazo', 'Por embarazo'),
        ('Por enfermedad', 'Por enfermedad'),
        ('Otro - Cual?', 'Otro - Cual?')
    ]), required=False)

    razon_no_estudia_otra = forms.CharField(label="¿Cual es la razón por la cual no estudia?*", max_length=100, required=False)  # se activa si no estudia y hay otra razon
    regimen_seguridad_social = forms.CharField(label="Régimen seguridad social*", max_length=100,widget=forms.Select(choices=[
       ('', '----------'),
       ('EPS contributivo', 'EPS contributivo'),
       ('Régimen Especial (fuerzas armadas, Ecopetrol, Universidades Públicas, Magisterio - UNIDOS)',
        'Régimen Especial (fuerzas armadas, Ecopetrol, Universidades Públicas, Magisterio - UNIDOS)'),
       ('EPS subsidiado (ARS-Administradora de Régimen Subsidiado)',
        'EPS subsidiado (ARS-Administradora de Régimen Subsidiado)'),
       ('Eps indígena', 'Eps indígena'),
       ('No tiene', 'No tiene'),
       ('No sabe, no informa', 'No sabe, no informa'),
       ('Subsidiado', 'Subsidiado'),
       ('Contributivo', 'Contributivo')
    ]), required=False)



    # -------------------------------------------------------------


    def _clean_fields(self):
        for name, field in self.fields.items():
            # value_from_datadict() gets the data from the data dictionaries.
            # Each widget type knows how to retrieve its own data, because some
            # widgets split data over several HTML fields.
            if name not in ['municipio_atencion','municipio_residencia','corregimiento','vereda','municipio_nacimiento','municipio_expedicion']:
                if field.disabled:
                    value = self.get_initial_for_field(field, name)
                else:
                    value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                try:
                    if isinstance(field, FileField):
                        initial = self.get_initial_for_field(field, name)
                        value = field.clean(value, initial)
                    else:
                        value = field.clean(value)

                    self.cleaned_data[name] = value
                    if hasattr(self, 'clean_%s' % name):
                        value = getattr(self, 'clean_%s' % name)()
                        self.cleaned_data[name] = value
                except ValidationError as e:
                    self.add_error(name, e)
            else:
                value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                self.cleaned_data[name] = value


    def __init__(self, *args, **kwargs):
        super(CaracterizacionInicialForm, self).__init__(*args, **kwargs)

        if 'pk_hogar' in kwargs['initial']:
            hogar = models.Hogares.objects.get(pk = kwargs['initial']['pk_hogar'])

            self.fields['departamento_atencion'].initial = hogar.municipio.departamento
            self.fields['municipio_atencion'].queryset = Municipios.objects.filter(departamento = hogar.municipio.departamento)
            self.fields['municipio_atencion'].initial = hogar.municipio

            self.fields['departamento_residencia'].initial = hogar.municipio_residencia.departamento
            self.fields['municipio_residencia'].queryset = Municipios.objects.filter(departamento=hogar.municipio_residencia.departamento)
            self.fields['municipio_residencia'].initial = hogar.municipio_residencia

            self.fields['corregimiento'].queryset = Corregimientos.objects.filter(municipio=hogar.municipio_residencia).order_by('nombre')
            self.fields['vereda'].queryset = Veredas.objects.filter(municipio=hogar.municipio_residencia).order_by('nombre')

            self.fields['barrio'].initial = hogar.barrio
            self.fields['telefono_fijo'].initial = hogar.telefono

            self.fields['primer_apellido'].initial = hogar.primer_apellido
            self.fields['segundo_apellido'].initial = hogar.segundo_apellido
            self.fields['primer_nombre'].initial = hogar.primer_nombre
            self.fields['segundo_nombre'].initial = hogar.segundo_nombre
            self.fields['numero_documento'].initial = hogar.documento
            self.fields['tipo_documento'].initial = 'Cedula'

            self.fields['celular_1'].initial = hogar.celular1
            self.fields['celular_2'].initial = hogar.celular2
            self.fields['fecha_nacimiento'].initial = hogar.fecha_nacimiento.strftime('%d/%m/%Y')

class PermisosCreateForm(forms.ModelForm):

    def _clean_fields(self):
        for name, field in self.fields.items():
            # value_from_datadict() gets the data from the data dictionaries.
            # Each widget type knows how to retrieve its own data, because some
            # widgets split data over several HTML fields.
            if name not in ['user','rutas_ver','rutas_preaprobar','rutas_aprobar']:
                if field.disabled:
                    value = self.get_initial_for_field(field, name)
                else:
                    value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                try:
                    if isinstance(field, FileField):
                        initial = self.get_initial_for_field(field, name)
                        value = field.clean(value, initial)
                    else:
                        value = field.clean(value)

                        if name == 'nombre':
                            try:
                                models.Rutas.objects.get(nombre = value)
                            except:
                                pass
                            else:
                                self.add_error(name, 'El nombre de la ruta ya existe')

                    self.cleaned_data[name] = value
                    if hasattr(self, 'clean_%s' % name):
                        value = getattr(self, 'clean_%s' % name)()
                        self.cleaned_data[name] = value
                except ValidationError as e:
                    self.add_error(name, e)
            else:
                value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                self.cleaned_data[name] = value

    def __init__(self, *args, **kwargs):
        super(PermisosCreateForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)

        if 'pk' in kwargs['initial'].keys():
            permiso = models.PermisosCuentasRutas.objects.get(pk = kwargs['initial']['pk'])
            self.fields['user'].queryset = models.User.objects.filter(email = permiso.user.email)
            self.fields['user'].initial = models.PermisosCuentasRutas.objects.get(user=permiso.user)
        else:
            self.fields['user'].queryset = models.User.objects.none()
            self.fields['rutas_ver'].queryset = models.Rutas.objects.none()
            self.fields['rutas_preaprobar'].queryset = models.Rutas.objects.none()
            self.fields['rutas_aprobar'].queryset = models.Rutas.objects.none()

        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Información del permiso',
                )
            ),
            Row(
                Column(
                    Row(
                        Column(
                            'user',
                            css_class='s12'
                        )
                    ),
                    Row(
                        Column(
                            'rutas_ver',
                            css_class='s12'
                        )
                    ),
                    Row(
                        Column(
                            'rutas_preaprobar',
                            css_class='s12'
                        )
                    ),
                    Row(
                        Column(
                            'rutas_aprobar',
                            css_class='s12'
                        )
                    ),
                    css_class="s12"
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.PermisosCuentasRutas
        fields = ['user','rutas_ver','rutas_preaprobar','rutas_aprobar']

class ArchivoRarZipForm(forms.Form):

    file = forms.FileField(widget=forms.FileInput(attrs={'accept': 'application/zip,application/x-rar-compressed,application/x-7z-compressed'}))


    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("rar_zip")

        if file.name.split('.')[-1] in ['rar','zip']:
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')




    def __init__(self, *args, **kwargs):
        super(ArchivoRarZipForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    kwargs['initial'].get('short_name'),
                )
            ),
            Row(
                Column(
                    'file',
                    css_class='s12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class CambioRutaComponenteForm(forms.Form):

    ruta = forms.ModelChoiceField(label='Ruta destino',queryset=models.Rutas.objects.none(),required=False)


    def _clean_fields(self):
        for name, field in self.fields.items():
            # value_from_datadict() gets the data from the data dictionaries.
            # Each widget type knows how to retrieve its own data, because some
            # widgets split data over several HTML fields.
            if name not in ['ruta']:
                if field.disabled:
                    value = self.get_initial_for_field(field, name)
                else:
                    value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                try:
                    if isinstance(field, FileField):
                        initial = self.get_initial_for_field(field, name)
                        value = field.clean(value, initial)
                    else:
                        value = field.clean(value)
                    self.cleaned_data[name] = value
                    if hasattr(self, 'clean_%s' % name):
                        value = getattr(self, 'clean_%s' % name)()
                        self.cleaned_data[name] = value
                except ValidationError as e:
                    self.add_error(name, e)
            else:
                value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                if value == '':
                    self.cleaned_data[name] = None
                else:
                    self.cleaned_data[name] = models.Rutas.objects.get(id = value)

    def clean(self):
        cleaned_data = super().clean()

        hogar = models.Hogares.objects.get(id = self.initial['pk'])
        componente = models.Componentes.objects.get(id=self.initial['pk_componente'])
        ruta = cleaned_data['ruta']

        if ruta != None:
            if ruta.get_cupo_componente(componente) < 1:
                self.add_error('ruta', 'La ruta no tiene cupos disponibles')

    def __init__(self, *args, **kwargs):
        super(CambioRutaComponenteForm, self).__init__(*args, **kwargs)


        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Cambio de ruta',
                )
            ),
            Row(
                Column(
                    'ruta',
                    css_class="s12 "
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class CambioRutaVinculacionForm(forms.Form):

    ruta = forms.ModelChoiceField(label='Ruta destino',queryset=models.Rutas.objects.none(),required=False)


    def _clean_fields(self):
        for name, field in self.fields.items():
            # value_from_datadict() gets the data from the data dictionaries.
            # Each widget type knows how to retrieve its own data, because some
            # widgets split data over several HTML fields.
            if name not in ['ruta']:
                if field.disabled:
                    value = self.get_initial_for_field(field, name)
                else:
                    value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                try:
                    if isinstance(field, FileField):
                        initial = self.get_initial_for_field(field, name)
                        value = field.clean(value, initial)
                    else:
                        value = field.clean(value)
                    self.cleaned_data[name] = value
                    if hasattr(self, 'clean_%s' % name):
                        value = getattr(self, 'clean_%s' % name)()
                        self.cleaned_data[name] = value
                except ValidationError as e:
                    self.add_error(name, e)
            else:
                value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
                if value == '':
                    self.cleaned_data[name] = None
                else:
                    self.cleaned_data[name] = models.Rutas.objects.get(id = value)

    def clean(self):
        cleaned_data = super().clean()

        hogar = models.Hogares.objects.get(id = self.initial['pk'])
        ruta = cleaned_data['ruta']

        if ruta != None:
            if ruta.get_cupo_vinculacion() < 1:
                self.add_error('ruta', 'La ruta no tiene cupos disponibles')

    def __init__(self, *args, **kwargs):
        super(CambioRutaVinculacionForm, self).__init__(*args, **kwargs)


        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Cambio de ruta',
                )
            ),
            Row(
                Column(
                    'ruta',
                    css_class="s12 "
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class ContactoCreateForm(forms.ModelForm):


    def __init__(self, *args, **kwargs):
        super(ContactoCreateForm, self).__init__(*args, **kwargs)

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Información del contacto',
                )
            ),
            Row(
                Column(
                    'municipio', css_class="s12"
                )
            ),
            Row(
                Column(
                    'nombres',css_class="s12 m6 l6"
                ),
                Column(
                    'apellidos', css_class="s12 m6 l6"
                )
            ),
            Row(
                Column(
                    'cargo', css_class="s12 m6 l4"
                ),
                Column(
                    'celular', css_class="s12 m6 l4"
                ),
                Column(
                    'email', css_class="s12 m6 l4"
                )
            ),
            Row(
                Column(
                    'resguardo', css_class="s12 m6 "
                ),
                Column(
                    'comunidad', css_class="s12 m6 "
                ),
                Column(
                    'lenguas', css_class="s12 m6 "
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.Contactos
        fields = ['municipio','nombres','apellidos','cargo','celular','email','resguardo','comunidad','lenguas']
        widgets = {
        }

class HuertaComunitariaForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()


        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(HuertaComunitariaForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Productos',
                    )
                ),
                Row(
                    Column(
                        'producto',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto1',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad1',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto2',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad2',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto3',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad3',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto4',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad4',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto5',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad5',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto6',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad6',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto7',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad7',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto8',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad8',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto9',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad9',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto10',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad10',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto11',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad11',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto12',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad12',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto13',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad13',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto14',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad14',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            'valor_total',
                            css_class="right-align s12 m4",

                        ),
                    ),
                ),
                Row(
                    Fieldset(
                        'Acta',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Productos',
                    )
                ),
                Row(
                    Column(
                        'producto',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto1',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad1',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto2',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad2',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto3',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad3',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto4',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad4',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto5',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad5',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto6',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad6',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto7',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad7',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto8',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad8',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto9',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad9',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto10',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad10',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto11',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad11',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto12',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad12',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto13',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad13',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto14',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad14',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            'valor_total',
                            css_class="right-align s12 m4",

                        ),
                    ),
                ),
                Row(
                    Fieldset(
                        'Acta',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
            self.fields['producto'] = forms.ModelChoiceField(queryset=models.Productos.objects.all().order_by('id'))




            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'municipio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'fecha',
                        css_class='s12 m6'
                    )
                ),
                Row(
                    Fieldset(
                        'Productos',
                    )
                ),
                Row(
                    Column(
                        'producto',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto1',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad1',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto2',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad2',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto3',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad3',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto4',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad4',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto5',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad5',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto6',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad6',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto7',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad7',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto8',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad8',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto9',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad9',
                        css_class='s12 m6'
                    ),

                ),
                Row(
                    Column(
                        'producto10',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad10',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto11',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad11',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto12',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad12',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto13',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad13',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        'producto14',
                        css_class='s12 m6'
                    ),
                    Column(
                        'cantidad14',
                        css_class='s12 m6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                        'valor_total',
                        css_class="right-align s12 m4",

                        ),
                    ),
                ),
                Row(
                    Fieldset(
                        'Acta',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

    class Meta:
        model = models.HuertaComunitaria
        fields = ['file','municipio','fecha','producto','cantidad','producto1','cantidad1','producto2','cantidad2','producto3','cantidad3'  ,
                  'producto4','cantidad4','producto5','cantidad5','producto6','cantidad6','producto7','cantidad7',
                  'producto8','cantidad8','producto9','cantidad9','producto10','cantidad10','producto11','cantidad11',
                  'producto12','cantidad12','producto13','cantidad13','producto14','cantidad14','valor_total']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
        }

class Visita_3_sa_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_3_sa_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Plan inversión huerta casera (en Formulario GForms) Aprobado',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la visita  del participante',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan inversión huerta casera (en Formulario GForms) Aprobado',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la visita  del participante',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan inversión huerta casera (en Formulario GForms) Aprobado',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la visita  del participante',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteGformsFotos2
        fields = ['file','foto1','foto2','foto3','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio': 'Grabacion de llamadas',
        }


class DocumentoSoporteFotos2AudioForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(DocumentoSoporteFotos2AudioForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporteFotos2Audio
        fields = ['file','foto1','foto2','foto3','audio1' ]
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mp3,audio/mpeg,video/mp4,audio/ogg'}),
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
        }



class Visita_3_fsc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_3_fsc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Formato visita de pertinencia IFC FSC V3',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotográfico de la visita 3 FSC (2 fotografías x IFC):',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Formato visita de pertinencia IFC FSC V3',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotográfico de la visita 3 FSC (2 fotografías x IFC):',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter( rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Formato visita de pertinencia IFC FSC V3',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotográfico de la visita 3 FSC (2 fotografías x IFC):',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoFotos2
        fields = ['file','foto1','foto2']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
        }


class DocumentoFotos2AudioForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(DocumentoFotos2AudioForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoFotos2Audio
        fields = ['file','foto1','foto2','audio1']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M", 'accept': 'audio/wav,audio/mp3,audio/mpeg,video/mp4,audio/ogg'})
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio': 'Audio 2',
        }


class Visita_4_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_4_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entrega del plan de vida del hogar - Cartilla',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive PVH 1',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía aplicación Plan de vida del Hogar',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entrega del plan de vida del hogar - Cartilla',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive PVH 1',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía aplicación Plan de vida del Hogar',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entrega del plan de vida del hogar - Cartilla',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive PVH 1',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía aplicación Plan de vida del Hogar',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2Fotos2
        fields = ['file','file2','foto1','foto2','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
             'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_6_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_6_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-89 Formato Seguimiento a la Inversión del Incentivo',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive  Seguimieto a la inversion del incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotográfico del estado actual de las mejoras en el hogar',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-89 Formato Seguimiento a la Inversión del Incentivo',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive  Seguimieto a la inversion del incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotográfico del estado actual de las mejoras en el hogar',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-89 Formato Seguimiento a la Inversión del Incentivo',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive  Seguimieto a la inversion del incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotográfico del estado actual de las mejoras en el hogar',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2Fotos2
        fields = ['file','file2','foto1','foto2','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
             'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_5_vmcForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_5_vmcForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-89 Formato Seguimiento a la Inversión del Incentivo',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Dificiltades en la inversión del incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía de la zona de almacenamiento de materiales y materiales comprados con el incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-89 Formato Seguimiento a la Inversión del Incentivo',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Dificiltades en la inversión del incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía de la zona de almacenamiento de materiales y materiales comprados con el incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-89 Formato Seguimiento a la Inversión del Incentivo',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Dificiltades en la inversión del incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía de la zona de almacenamiento de materiales y materiales comprados con el incentivo',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2Fotos2
        fields = ['file','file2','foto1','foto2','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
             'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Documento2FotoForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Documento2FotoForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2Foto
        fields = ['file','file2','foto1']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
        }

class DocumentoSoporte2FotoForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(DocumentoSoporte2FotoForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2Fotos
        fields = ['file','foto1','foto2','foto3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
        }

class Visita_4_PPForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Visita_4_PPForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de Inversion Proyecto Productivo (Gforms Aprobado)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE Pre-inscripción a los Mercados Campesinos o Mercado Multi-étnicos',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de Inversion Proyecto Productivo (Gforms Aprobado)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE Pre-inscripción a los Mercados Campesinos o Mercado Multi-étnicos. ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de Inversion Proyecto Productivo (Gforms Aprobado)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE Pre-inscripción a los Mercados Campesinos o Mercado Multi-étnicos.',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2Soporte
        fields = ['file','file2','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,image/jpg,image/jpeg,image/png'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',

        }

class Visita_5_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Visita_5_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita (pdf)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Base de datos de la validación de la inscripción a los mercados campesinos o mercados multi-étnicos (excel)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía del cuadro diligenciado que contempla la definición de actividades por cada área del proyecto productivo y la asignación de responsables',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita (pdf)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Base de datos de la validación de la inscripción a los mercados campesinos o mercados multi-étnicos (excel)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía del cuadro diligenciado que contempla la definición de actividades por cada área del proyecto productivo y la asignación de responsables',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita (pdf)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Base de datos de la validación de la inscripción a los mercados campesinos o mercados multi-étnicos (excel)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía del cuadro diligenciado que contempla la definición de actividades por cada área del proyecto productivo y la asignación de responsables',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2SoporteFotos2
        fields = ['file','file2','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }

class DocumentoSoporte3Fotos2Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

    def __init__(self, *args, **kwargs):
        super(DocumentoSoporte3Fotos2Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s4'
                    ),
                    Column(
                        'foto2',
                        css_class='s4'
                    ),
                    Column(
                        'foto3',
                        css_class='s4'
                    ),
                ),

                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s4'
                    ),
                    Column(
                        'foto2',
                        css_class='s4'
                    ),
                    Column(
                        'foto3',
                        css_class='s4'
                    ),
                ),

                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s4'
                    ),
                    Column(
                        'foto2',
                        css_class='s4'
                    ),
                    Column(
                        'foto3',
                        css_class='s4'
                    ),
                ),

                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte3Fotos2
        fields = ['file','foto1','foto2','foto3','foto4','foto5']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
        }

class Taller_3_pp_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Taller_3_pp_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Plazos y metas de ejecución Plan de Inversión',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive oportunidades comercionales (potenciales compradores)',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Plazos y metas de ejecución Plan de Inversión',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive oportunidades comercionales (potenciales compradores)',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Plazos y metas de ejecución Plan de Inversión',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive oportunidades comercionales (potenciales compradores)',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3Soporte
        fields = ['file','file2','file3','foto1','foto2','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_6_sa_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Visita_6_sa_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato lista de chequeo implementación huerta casera ANDES',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario implementación Huerta Casera por participante',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato lista de chequeo implementación huerta casera ANDES',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario implementación Huerta Casera por participante',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato lista de chequeo implementación huerta casera ANDES',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario implementación Huerta Casera por participante',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3Soporte
        fields = ['file','file2','file3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,image/jpg,image/jpeg,image/png'}
            ),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Visita_3_pp_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Visita_3_pp_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive DOFA POR HOGAR PP',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Email coordinador municipial aprobación base Perfil Productivo para 100% hogares',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive DOFA POR HOGAR PP',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Email coordinador municipial aprobación base Perfil Productivo para 100% hogares',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita ',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive DOFA POR HOGAR PP',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Email coordinador municipial aprobación base Perfil Productivo para 100% hogares',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoSoporte2
        fields = ['file','foto1','foto2','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio': 'audio',
        }

class Documento2Soporte2Fotos3Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Documento2Soporte2Fotos3Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2Soporte2Fotos3
        fields = ['file','file2','foto1','foto2','foto3','foto4','foto5']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5'
        }

class DocumentoGeneralForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super(DocumentoGeneralForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documentos PDF',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'ARCHIVO RAR o ZIP',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documentos PDF',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'ARCHIVO RAR o ZIP',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Button(
                                "cargar",
                                'Cargar todos',
                                css_class='button'
                            ),
                            css_class="left-align",
                            css_id="cargar_todos"
                        ),
                        css_class="s12"
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documentos PDF',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'ARCHIVO RAR o ZIP',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Button(
                                "cargar",
                                'Cargar todos',
                                css_class='button'
                            ),
                            css_class="left-align",
                            css_id="cargar_todos"
                        ),
                        css_class="s12"
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoGeneral
        fields = ['file','file2','file3','foto1','foto2']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': '.zip,.rar,.7zip'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
        }
        labels = {
            'file': 'PDF 1',
            'file2': 'PDF 2',
            'file3': 'PDF 3',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
        }

class Documento2SoporteFotos3Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Documento2SoporteFotos3Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotografico:',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2SoporteFotos3
        fields = ['file','file2','foto1','foto2','foto3','foto4']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'})
        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4'
        }

class Jic_2_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_2_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos3
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel'}
            ),



            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Otros_8_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Otros_8_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Ventas, presentación y costo de productos',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Ventajas y procesos de formalización de empresas',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP resolución de conflictos',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Aspectos estratégicos en la rueda de inclusión productiva',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        '100% de Acuerdos comerciales firmados por las partes y  cargadas al SICAN',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Ventas, presentación y costo de productos',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Ventajas y procesos de formalización de empresas',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP resolución de conflictos',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Aspectos estratégicos en la rueda de inclusión productiva',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        '100% de Acuerdos comerciales firmados por las partes y  cargadas al SICAN',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Ventas, presentación y costo de productos',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Ventajas y procesos de formalización de empresas',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP resolución de conflictos',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta RIP Aspectos estratégicos en la rueda de inclusión productiva',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        '100% de Acuerdos comerciales firmados por las partes y  cargadas al SICAN',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos3
        fields = ['file','file2','file3','file4','file5']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'Acta',
        }



class Taller_4_saForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

    def __init__(self, *args, **kwargs):
        super(Taller_4_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de sostenibilidad de huertas comunitarias',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Resultados Prueba de Germinación',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografias con los letreros demarcación con el nombre de la huerta comunitari',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de sostenibilidad de huertas comunitarias',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Resultados Prueba de Germinación',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografias con los letreros demarcación con el nombre de la huerta comunitari',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )



        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(

                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",

                                                                        queryset=models.Hogares.objects.filter(

                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:

                    self.fields['hogares'].initial = instrumento_object.hogares.all()

                except:

                    pass


            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(

                    "id", flat=True)

                try:

                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(

                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))


                except:

                    pass

            self.helper = FormHelper(self)

            self.helper.layout = Layout(

                Row(

                    Fieldset(

                        kwargs['initial'].get('short_name'),

                    )

                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de sostenibilidad de huertas comunitarias',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Resultados Prueba de Germinación',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografias con los letreros demarcación con el nombre de la huerta comunitari',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'

                    )

                ),

                Row(

                    Column(

                        Div(

                            Submit(

                                'submit',

                                'Guardar',

                                css_class='button-submit'

                            ),

                            css_class="right-align"

                        ),

                        css_class="s12"

                    ),

                )

            )


    class Meta:
        model = models.Documento3Soporte2Fotos3Foto
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_5_saForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

    def __init__(self, *args, **kwargs):
        super(Taller_5_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato  PS con resultados de prueba de germinación, firmada por el líder de SA ( de la huerta)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe completo del avance de cada huerta comunitaria en formato ANDES',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía de la comunidad trabajando en la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato  PS con resultados de prueba de germinación, firmada por el líder de SA ( de la huerta)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe completo del avance de cada huerta comunitaria en formato ANDES',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía de la comunidad trabajando en la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )



        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)

            self.helper.layout = Layout(

                Row(

                    Fieldset(

                        kwargs['initial'].get('short_name'),

                    )

                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato  PS con resultados de prueba de germinación, firmada por el líder de SA ( de la huerta)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe completo del avance de cada huerta comunitaria en formato ANDES',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía de la comunidad trabajando en la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'

                    )

                ),

                Row(

                    Column(

                        Div(

                            Submit(

                                'submit',

                                'Guardar',

                                css_class='button-submit'

                            ),

                            css_class="right-align"

                        ),

                        css_class="s12"

                    ),

                )

            )


    class Meta:
        model = models.Documento3SoporteFotos3
        fields = ['file','file2','file3','file4','file5','foto1','foto2','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_3_fsc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_3_fsc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI IFC firmado y escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Entrega de carpeta IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Plan de Inversión IFC Gforms/APK',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI IFC firmado y escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Entrega de carpeta IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Plan de Inversión IFC Gforms/APK',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI IFC firmado y escaneado',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Entrega de carpeta IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Plan de Inversión IFC Gforms/APK',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos3
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','foto4','audio1','audio2','audio3','rar']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'rar': forms.ClearableFileInput(attrs={'data-max-file-size': "100MB",'accept': 'application/x-zip-compressed,x-rar'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file',
            'file3': 'file',
            'file4': 'file',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'audio1',
            'audio2': 'audio2',
            'audio3': 'audio3',
            'rar': 'rar'
        }


class Taller_6_fsc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('file', 'No ha cargado ningun archivo')

    def __init__(self, *args, **kwargs):
        super(Taller_6_fsc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Subsanación de carpetas IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Subsanación de carpetas IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Subsanación de carpetas IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos3
        fields = ['file','file2','file4','foto2','foto3','foto4','audio1','audio2','audio3','rar']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'rar': forms.ClearableFileInput(attrs={'data-max-file-size': "100MB",'accept': 'application/x-zip-compressed,x-rar'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file',
            'file4': 'file',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'audio1',
            'audio2': 'audio2',
            'audio3': 'audio3',
            'rar': 'rar'
        }


class Taller_5_fsc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('file', 'Este objeto esta vacio, por favor cargar el documento correspondiente')



    def __init__(self, *args, **kwargs):
        super(Taller_5_fsc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Subsanación de carpetas IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Subsanación de carpetas IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Subsanación de carpetas IFC (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'rar',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos3
        fields = ['file','file2','file4','foto2','foto3','foto4','audio1','audio2','audio3','rar']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'rar': forms.ClearableFileInput(attrs={'data-max-file-size': "100MB",'accept': 'application/x-zip-compressed,application/octet-stream,application/x-rar-compressed'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file',
            'file4': 'file',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'audio1',
            'audio2': 'audio2',
            'audio3': 'audio3',
            'rar': 'rar'
        }


class EntregahuertacaseraForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super(EntregahuertacaseraForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entega de Insumos huerta casera /firmada por participante (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de Inversión de Insumos huerta casera /Firmada por participante / entregada en fisico a coordinación (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Correo de coordinador con aprobación de Excel Uno a uno de insumos entregados y pendientes de entrega por participante (Imagen) ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías  de entrega de insumos huerta casera a participante  por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entega de Insumos huerta casera /firmada por participante (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de Inversión de Insumos huerta casera /Firmada por participante / entregada en fisico a coordinación (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Correo de coordinador con aprobación de Excel Uno a uno de insumos entregados y pendientes de entrega por participante (Imagen) ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías  de entrega de insumos huerta casera a participante  por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entega de Insumos huerta casera /firmada por participante (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de Inversión de Insumos huerta casera /Firmada por participante / entregada en fisico a coordinación (Rar o Zip)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Correo de coordinador con aprobación de Excel Uno a uno de insumos entregados y pendientes de entrega por participante (Imagen) ',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías  de entrega de insumos huerta casera a participante  por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2SoporteFotos4
        fields = ['file','file2','foto1','foto2','foto3','foto4','foto5']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'application/x-zip-compressed,application/octet-stream,application/x-rar-compressed,application/pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'application/x-zip-compressed,application/octet-stream,application/x-rar-compressed,application/pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',

        }

class jic_1_saForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")
        file3 = cleaned_data.get("file3")
        file4 = cleaned_data.get("file4")
        file5 = cleaned_data.get("file5")
        file6 = cleaned_data.get("file6")
        file7 = cleaned_data.get("file7")
        file8 = cleaned_data.get("file8")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file4.name.split('.')[-1] == 'pdf' or file4.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file4', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(jic_1_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección líder NO FEST',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Expresiones culturales en las veredas del GF',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                    Column(
                        'foto10',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']).exclude(id__in =ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección líder NO FEST',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Expresiones culturales en las veredas del GF',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                    Column(
                        'foto10',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField( queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']).exclude(id__in =ids))

                except:
                    pass


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección líder NO FEST',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Expresiones culturales en las veredas del GF',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                    Column(
                        'foto10',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos3Fotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','foto10','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto10': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file2',
            'file3': 'file3',
            'file4': 'file5',
            'file5': 'file6',
            'file6': 'file7',
            'file7': 'file8',
            'file8': 'file9',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'foto10': 'Foto 10',
            'audio': 'audio'
        }


class taller_8_ppForm(forms.ModelForm):


    def clean(self):
        cleaned_data = super().clean()



    def __init__(self, *args, **kwargs):
        super(taller_8_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PDF mapa de logros del componente por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 1',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 2',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 3',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (pdf o excel) ',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GForms Fortalecimiento asociativo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']).exclude(id__in =ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PDF mapa de logros del componente por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 1',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 2',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 3',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) (pdf o excel) ',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GForms Fortalecimiento asociativo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField( queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in =ids))
                except:
                    pass


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PDF mapa de logros del componente por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 1',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 2',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Acta y listado de asistencia de fortalecimiento a asociaciones No. 3',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GForms Fortalecimiento asociativo',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos3Fotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','foto1','foto2','foto3','foto4','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),


            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file2',
            'file3': 'file3',
            'file4': 'filea',
            'file5': 'file5',
            'file6': 'file6',
            'file7': 'file7',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio': 'audio'
        }


class Taller_3_vmc_Form(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Taller_3_vmc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3Fotos3
        fields = ['file','file2','file3','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class huertacomunitariasaForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()

    def __init__(self, *args, **kwargs):
        super(huertacomunitariasaForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entrega de insumos de la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Inventario de insumos recibidos por ruta',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de inversión firmado de huerta Comunitaria',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video entrega de huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega de la huerta',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entrega de insumos de la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Inventario de insumos recibidos por ruta',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de inversión firmado de huerta Comunitaria',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video entrega de huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega de la huerta',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Acta de entrega de insumos de la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Inventario de insumos recibidos por ruta',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Plan de inversión firmado de huerta Comunitaria',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video entrega de huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega de la huerta',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3Fotos3
        fields = ['file','file2','file3','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class Taller_3_sa_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_3_sa_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato de autorización de uso del predio (según modelo enviado por ANDES)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía planeador de Huerta Comunitaria (diligenciado con actividades del proximo mes)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                    'Fotografías del  trabajo en la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato de autorización de uso del predio (según modelo enviado por ANDES)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía planeador de Huerta Comunitaria (diligenciado con actividades del proximo mes)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías del  trabajo en la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass
            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato de autorización de uso del predio (según modelo enviado por ANDES)',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografía planeador de Huerta Comunitaria (diligenciado con actividades del proximo mes)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías del  trabajo en la huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Soportes3
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class Taller_4_fsc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()


    def __init__(self, *args, **kwargs):
        super(Taller_4_fsc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Entrega de carpeta IFC',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Entrega de carpeta IFC',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Entrega de carpeta IFC',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Soportes3
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'application/octet-stream,application/x-zip-compressed,application/x-rar-compressed'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class Taller_6_pp_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('El campo no posee un archivo cargado')

    def __init__(self, *args, **kwargs):
        super(Taller_6_pp_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de datos de actor o posible comprador del grupo de formación por sector (agricola, pecuario, manufacturero)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GFORMS Balance por ruta de ventas en mercados campesinos validado por los líderes',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de datos de actor o posible comprador del grupo de formación por sector (agricola, pecuario, manufacturero)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GFORMS Balance por ruta de ventas en mercados campesinos validado por los líderes',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de datos de actor o posible comprador del grupo de formación por sector (agricola, pecuario, manufacturero)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GFORMS Balance por ruta de ventas en mercados campesinos validado por los líderes',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamada',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Soportes4
        fields = ['file','file2','file3','file4','foto1','foto2','foto3','foto4','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class Jic_2_vmc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Jic_2_vmc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultados actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                     Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultados actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultados actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento6Fotos3
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_4_vmc_Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_4_vmc_Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Gestión de rezagos de VMC',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de cierre de dispersión',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Plan de embellecimiento del espacio comunitario',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías actividad maquetas',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                     Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Gestión de rezagos de VMC',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de cierre de dispersión',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Plan de embellecimiento del espacio comunitario',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías actividad maquetas',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Gestión de rezagos de VMC',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de cierre de dispersión',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Plan de embellecimiento del espacio comunitario',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías actividad maquetas',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento6Fotos3
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class jic_1_fscForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")
        file3 = cleaned_data.get("file3")
        file4 = cleaned_data.get("file4")
        file5 = cleaned_data.get("file5")
        file6 = cleaned_data.get("file6")
        file7 = cleaned_data.get("file7")
        file8 = cleaned_data.get("file8")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file4.name.split('.')[-1] == 'pdf' or file4.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file4', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(jic_1_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección IFC (incluye prefactibilidad)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección IFC (incluye prefactibilidad)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección IFC (incluye prefactibilidad)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos4Fotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file2',
            'file3': 'file3',
            'file4': 'file5',
            'file5': 'file6',
            'file6': 'file7',
            'file7': 'file8',
            'file8': 'file9',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio': 'audio'
        }


class jic_5_fscForm(forms.ModelForm):


    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file4 = cleaned_data.get("file4")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file4.name.split('.')[-1] == 'pdf' or file4.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file4', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(jic_5_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Videos',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Videos',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Videos',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos4Fotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file2',
            'file3': 'file3',
            'file4': 'file5',
            'file5': 'file6',
            'file6': 'file7',
            'file7': 'file8',
            'file8': 'file9',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio': 'audio'
        }



class jic_1_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")
        file3 = cleaned_data.get("file3")
        file4 = cleaned_data.get("file4")
        file5 = cleaned_data.get("file5")
        file6 = cleaned_data.get("file6")
        file7 = cleaned_data.get("file7")
        file8 = cleaned_data.get("file8")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file4.name.split('.')[-1] == 'pdf' or file4.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file4', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(jic_1_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])


        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Selección IFC (incluye prefactibilidad)',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Formulario de asociaciones productivas',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Formulario de asociaciones productivas',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos4Fotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file2',
            'file3': 'file3',
            'file4': 'file5',
            'file5': 'file6',
            'file6': 'file7',
            'file7': 'file8',
            'file8': 'file9',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio': 'audio'
        }

class jic_1_vmcForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")
        file3 = cleaned_data.get("file3")
        file4 = cleaned_data.get("file4")
        file5 = cleaned_data.get("file5")
        file6 = cleaned_data.get("file6")
        file7 = cleaned_data.get("file7")
        file8 = cleaned_data.get("file8")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file4.name.split('.')[-1] == 'pdf' or file4.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file4', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(jic_1_vmcForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])


        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video resultado actividad promoción de cultura',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(
                    rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",
                                                                    queryset=models.Hogares.objects.filter(
                                                                        rutas=kwargs['initial']['pk_ruta']).exclude(
                                                                        id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video resultado actividad promoción de cultura',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(
                    id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",
                                                                        queryset=models.Hogares.objects.filter(
                                                                            rutas=kwargs['initial']['pk_ruta']))

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass

            else:

                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list(
                    "id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(
                        rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))

                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video resultado actividad promoción de cultura',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'fotografías de la JIC:',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada JIC',
                    )
                ),
                Row(
                    Column(
                        'audio',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4SoporteFotos4Fotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'file',
            'file2': 'file2',
            'file3': 'file3',
            'file4': 'file5',
            'file5': 'file6',
            'file6': 'file7',
            'file7': 'file8',
            'file8': 'file9',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio': 'audio'
        }


class jic_2_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(jic_2_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro(Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro(Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Documento Escaneado',
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria (Firman FEST-NOFEST)',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro(Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Fotos4Fotos4
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'file 5',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class DispersionyprooveduriappForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")
        file2 = cleaned_data.get("file2")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')

        if file2.name.split('.')[-1] == 'pdf' or file2.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file2', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(DispersionyprooveduriappForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (todos los participantes FEST)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de ventas de la feria de proveeduría',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (todos los participantes FEST)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de ventas de la feria de proveeduría',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST (todos los participantes FEST)',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Informe de ventas de la feria de proveeduría',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento2
        fields = ['file','file2','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                     'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class Jic_3_saForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_3_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI de huerta casera firmado por los participantes escaneado y entregado en físico al coordinador (ANDES enviará este PI impreso para firma) - Todos los hogares en Comprimido ZIP',
                        css_class='s10'
                    )
                ),
                Row(
                    Column(
                        'file9',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario gforms  recetas tradicionales',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario gforms pre inscripción a ferias Agroalimentarias',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Recetas Tradicionales',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI de huerta casera firmado por los participantes escaneado y entregado en físico al coordinador (ANDES enviará este PI impreso para firma) - Todos los hogares en Comprimido ZIP',
                        css_class='s10'
                    )
                ),
                Row(
                    Column(
                        'file9',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario gforms  recetas tradicionales',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario gforms pre inscripción a ferias Agroalimentarias',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Recetas Tradicionales',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'PI de huerta casera firmado por los participantes escaneado y entregado en físico al coordinador (ANDES enviará este PI impreso para firma) - Todos los hogares en Comprimido ZIP',
                        css_class='s10'
                    )
                ),
                Row(
                    Column(
                        'file9',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario gforms  recetas tradicionales',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario gforms pre inscripción a ferias Agroalimentarias',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Recetas Tradicionales',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoFotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','file9','foto1','foto2','foto3','foto4','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file9': forms.ClearableFileInput(attrs={
                'data-max-file-size': "100M",
                'accept': 'application/x-zip-compressed,application/x-rar-compressed'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'File',
            'file2': 'File 2',
            'file3': 'File 3',
            'file4': 'File 4',
            'file5': 'File 5',
            'file6': 'File 6',
            'file7': 'File 7',
            'file8': 'File 8',
            'file9': 'File 9',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',

        }


class Jic_4_ppForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_4_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Formato acta de reunión ANDES actividad complementaria',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Listado de asistencia ANDES actividad complementaria - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file6',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file7',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file8',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.DocumentoFotos4
        fields = ['file','file2','file3','file4','file5','file6','file7','file8','foto1','foto2','foto3','foto4','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file6': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file7': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file8': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'File',
            'file2': 'File 2',
            'file3': 'File 3',
            'file4': 'File 4',
            'file5': 'File 5',
            'file6': 'File 6',
            'file7': 'File 7',
            'file8': 'File 8',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',

        }


class Taller_4_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_4_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE Actores Institucionales y Representantes de las Plazas y/o Muelles ',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                    Column(
                        'foto10',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografia listado de asociaciones locales y regionales',
                    )
                ),
                Row(
                    Column(
                        'foto11',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE del Directorio de Entidades y Funcionarios que apoyan el fortalecimiento técnico y económico a los hogares',
                    )
                ),
                Row(
                    Column(
                        'foto12',
                        css_class='s6'
                    ),
                    Column(
                        'foto13',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto14',
                        css_class='s6'
                    ),
                    Column(
                        'foto15',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto16',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE Actores Institucionales y Representantes de las Plazas y/o Muelles ',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                    Column(
                        'foto10',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografia listado de asociaciones locales y regionales',
                    )
                ),
                Row(
                    Column(
                        'foto11',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE del Directorio de Entidades y Funcionarios que apoyan el fortalecimiento técnico y económico a los hogares',
                    )
                ),
                Row(
                    Column(
                        'foto12',
                        css_class='s6'
                    ),
                    Column(
                        'foto13',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto14',
                        css_class='s6'
                    ),
                    Column(
                        'foto15',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto16',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE Actores Institucionales y Representantes de las Plazas y/o Muelles ',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                    Column(
                        'foto10',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografia listado de asociaciones locales y regionales',
                    )
                ),
                Row(
                    Column(
                        'foto11',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte del diligenciamiento del formulario GDRIVE del Directorio de Entidades y Funcionarios que apoyan el fortalecimiento técnico y económico a los hogares',
                    )
                ),
                Row(
                    Column(
                        'foto12',
                        css_class='s6'
                    ),
                    Column(
                        'foto13',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto14',
                        css_class='s6'
                    ),
                    Column(
                        'foto15',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto16',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos4
        fields = ['file','file2','file3','foto1','foto2','foto3','foto5','foto6','foto7','foto8','foto9','foto10','foto11','foto12','foto13','foto14','foto15','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto10': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto11': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto12': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto13': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto14': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto15': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto16': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
             'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'foto10': 'Foto 10',
            'foto11': 'Foto 11',
            'foto12': 'Foto 12',
            'foto13': 'Foto 13',
            'foto14': 'Foto 14',
            'foto15': 'Foto 15',
            'foto16': 'Foto 16',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_7_pp_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No posee algun archivo cargado')



    def __init__(self, *args, **kwargs):
        super(Taller_7_pp_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Foto de un ejemplo de diligenciamiento de la actividad de la importancia del registro contable por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GFORMS Preinscripción Rueda de negocios',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Foto de un ejemplo de diligenciamiento de la actividad de la importancia del registro contable por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GFORMS Preinscripción Rueda de negocios',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Foto de un ejemplo de diligenciamiento de la actividad de la importancia del registro contable por grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Diligenciamiento del formulario GFORMS Preinscripción Rueda de negocios',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos4
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','foto5','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

             'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_6_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_6_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultados de la implementación del componente',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Videos testimoniales sobre resultados de componente',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultados de la implementación del componente',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Videos testimoniales sobre resultados de componente',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Resultados de la implementación del componente',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Videos testimoniales sobre resultados de componente',
                    )
                ),
                Row(
                    Column(
                        'foto5',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos4
        fields = ['file','file2','file3','foto1','foto2','foto3','foto5','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto5': 'Foto 5',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_5_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')



    def __init__(self, *args, **kwargs):
        super(Taller_5_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías del cuadro de tareas del hogar de los lideres para el proyecto productivo',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega y socialización de la Fería de Proveeduría al grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la presentación o requisitos de la entrega del incentivo de proyecto productivo',
                    )
                ),
                Row(
                    Column(
                        'foto10',
                        css_class='s6'
                    ),
                    Column(
                        'foto11',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto12',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías del cuadro de tareas del hogar de los lideres para el proyecto productivo',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega y socialización de la Fería de Proveeduría al grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la presentación o requisitos de la entrega del incentivo de proyecto productivo',
                    )
                ),
                Row(
                    Column(
                        'foto10',
                        css_class='s6'
                    ),
                    Column(
                        'foto11',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto12',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista participantes encuentro (Metodologia virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías del cuadro de tareas del hogar de los lideres para el proyecto productivo',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la entrega y socialización de la Fería de Proveeduría al grupo de formación',
                    )
                ),
                Row(
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la presentación o requisitos de la entrega del incentivo de proyecto productivo',
                    )
                ),
                Row(
                    Column(
                        'foto10',
                        css_class='s6'
                    ),
                    Column(
                        'foto11',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto12',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de llamadas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos4
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','foto10','foto11','foto12','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),


            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto10': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto11': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto12': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

             'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'foto10': 'Foto 10',
            'foto11': 'Foto 11',
            'foto12': 'Foto 12',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_5_vmcForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Taller_5_vmcForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Seguimiento al Plan de Embellecimiento comunitario',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Seguimiento al Plan de Embellecimiento comunitario',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Seguimiento al Plan de Embellecimiento comunitario',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos2
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Jic_5_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No ha cargado un archivo en este campo')


    def __init__(self, *args, **kwargs):
        super(Jic_5_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                    Column(
                        'foto2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos2
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class visita_8_ppForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No ha cargado un archivo en este campo')


    def __init__(self, *args, **kwargs):
        super(visita_8_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-85 Seguimiento a la verificación del incentivo PP',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-91 Plan de Inversión Proyecto Productivo firmado',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento de GDrive Verificación de la inversión del plan de proyecto productivo',
                    ),
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-85 Seguimiento a la verificación del incentivo PP',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-91 Plan de Inversión Proyecto Productivo firmado',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento de GDrive Verificación de la inversión del plan de proyecto productivo',
                    ),
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-18 Formato de registro de visita',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-85 Seguimiento a la verificación del incentivo PP',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-91 Plan de Inversión Proyecto Productivo firmado',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento de GDrive Verificación de la inversión del plan de proyecto productivo',
                    ),
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos2
        fields = ['file','file2','file3','foto1','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_7_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No ha cargado un documento en este campo ')


    def __init__(self, *args, **kwargs):
        super(Taller_7_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Asociaciones y grupos culturales en las veredas del GF',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Asociaciones y grupos culturales en las veredas del GF',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Asociaciones y grupos culturales en las veredas del GF',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos2
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_6_saForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Taller_6_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Metas cumplidas por el hogar',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video huerta comunitaria testimonio lider SA',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Visto bueno del coordinador en entregas pendientes de huertas caseras',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la actividad de trabajo en huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Metas cumplidas por el hogar',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video huerta comunitaria testimonio lider SA',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Visto bueno del coordinador en entregas pendientes de huertas caseras',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la actividad de trabajo en huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Metas cumplidas por el hogar',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Video huerta comunitaria testimonio lider SA',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Visto bueno del coordinador en entregas pendientes de huertas caseras',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la actividad de trabajo en huerta comunitaria',
                    )
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos4
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','foto5','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Taller_8_fscForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")

        if file != None:
            if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
                pass
            else:
                self.add_error('file', 'El archivo cargado no tiene un formato valido')
        else:
            self.add_error('No posee un archivo cargado')

    def __init__(self, *args, **kwargs):
        super(Taller_8_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Cierre componente FSC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Preparación de la Jornada de Integración Comunitaria 5',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),

                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Cierre componente FSC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Preparación de la Jornada de Integración Comunitaria 5',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),

                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista exel participantes encuentro (aplica para metodología virtual)',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Cierre componente FSC',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Preparación de la Jornada de Integración Comunitaria 5',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Registro Fotográfico del Encuentro',
                    )
                ),
                Row(
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                ),

                Row(
                    Column(
                        'foto5',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabación de llamada encuentro',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento3SoporteFotos4
        fields = ['file','file2','file3','foto1','foto2','foto3','foto4','foto5','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Jic_3_fscForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_3_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mapeo de participación de JAC y Organizaciones sociales JIC 3',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mapeo de participación de JAC y Organizaciones sociales JIC 3',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mapeo de participación de JAC y Organizaciones sociales JIC 3',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Fotos5
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'file 5',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Jic_3_ppForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_3_ppForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Fotos5
        fields = ['file','file2','file3','file4','file5','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'file 5',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto8': 'Foto 8',
            'foto9': 'Foto 9',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }

class Jic_4_fscForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_4_fscForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mapeo de participación de JAC y Organizaciones sociales JIC 4',
                        css_class='s10'
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mapeo de participación de JAC y Organizaciones sociales JIC 4',
                        css_class='s10'
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte de diligenciamiento del Formulario Gdrive Mapeo de participación de JAC y Organizaciones sociales JIC 4',
                        css_class='s10'
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Fotos5
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),


            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'file 5',
            'foto1': 'Foto 1',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Jic_4_saForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_4_saForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Fotos5
        fields = ['file','file2','file3','file4','file5','foto2','foto3','foto6','foto7','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),

            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),


            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'file 5',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }


class Jic_4_vmcForm(forms.ModelForm):
    def clean(self):
        cleaned_data = super().clean()
        file = cleaned_data.get("file")


        if file.name.split('.')[-1] == 'pdf' or file.name.split('.')[-1] == 'PDF':
            pass
        else:
            self.add_error('file', 'El archivo cargado no tiene un formato valido')


    def __init__(self, *args, **kwargs):
        super(Jic_4_vmcForm, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        elif instrumento.nivel == 'individual':
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelChoiceField(label="Hogar", queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


        else:
            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])
                self.fields['hogares'] = forms.ModelMultipleChoiceField(label="Hogar",queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))
                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()
                except:
                    pass
            else:
                ids = models.Hogares.objects.filter(instrumento_hogar_fest_2020__instrumento=instrumento).values_list("id", flat=True)
                try:
                    self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']).exclude(id__in=ids))
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-13 Formato de acta de reunión',
                    )
                ),
                Row(
                    Column(
                        'file',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares FEST',
                    )
                ),
                Row(
                    Column(
                        'file2',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'F-GI-IP-19 Lista Asistencia Encuentro FEST - Firman hogares NOFEST',
                    )
                ),
                Row(
                    Column(
                        'file3',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES FEST',
                    )
                ),
                Row(
                    Column(
                        'file4',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'FLA-01 Lista excel participantes encuentro (aplica para metodología virtual) - HOGARES NO FEST',
                    )
                ),
                Row(
                    Column(
                        'file5',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la JIC',
                    )
                ),
                Row(
                    Column(
                        'foto2',
                        css_class='s6'
                    ),
                    Column(
                        'foto3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto4',
                        css_class='s6'
                    ),
                    Column(
                        'foto5',
                        css_class='s6'
                    )
                ),
                Row(
                    Fieldset(
                        'Fotografías de la Actividad Complementaria',
                    )
                ),
                Row(
                    Column(
                        'foto6',
                        css_class='s6'
                    ),
                    Column(
                        'foto7',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'foto8',
                        css_class='s6'
                    ),
                    Column(
                        'foto9',
                        css_class='s6'
                    ),
                ),
                Row(
                    Fieldset(
                        'Grabacion de lllamdas',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    ),
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.Documento4Fotos5
        fields = ['file','file2','file3','file4','file5','foto1','foto2','foto3','foto4','foto5','foto6','foto7','foto8','foto9','audio1','audio2','audio3']
        widgets = {
            'file': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/pdf,application/x-pdf'}
            ),
            'file4': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'file5': forms.ClearableFileInput(attrs={
                'data-max-file-size': "10M",
                'accept': 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
            ),
            'foto2': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto3': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto4': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto5': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto6': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto7': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto8': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),
            'foto9': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),


            'audio1': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio2': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),
            'audio3': forms.ClearableFileInput(attrs={'data-max-file-size': "100M",
                                                      'accept': 'audio/wav,audio/mpeg,audio/mp3,audio/mpeg,video/mp4,audio/ogg,video/M4A,audio/M4A,video/amr,audio/amr,audio/m4a,video/mpeg,video/AAC'}),

        }
        labels = {
            'file': 'Acta',
            'file2': 'Acta',
            'file3': 'Acta',
            'file4': 'Acta',
            'file5': 'file 5',
            'foto2': 'Foto 2',
            'foto3': 'Foto 3',
            'foto4': 'Foto 4',
            'foto5': 'Foto 5',
            'foto6': 'Foto 6',
            'foto7': 'Foto 7',
            'foto9': 'Foto 9',
            'foto8': 'Foto 8',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3',
        }



#----------------------------------------------------------------------------------

class GenerarLiquidacionForm(forms.Form):
    valores = forms.CharField(widget=forms.HiddenInput())
    valores_inicial = forms.CharField(widget=forms.HiddenInput())
    mes = forms.MultipleChoiceField(choices=[
        ('Enero','Enero'),
        ('Febrero', 'Febrero'),
        ('Marzo', 'Marzo'),
        ('Abril', 'Abril'),
        ('Mayo', 'Mayo'),
        ('Junio', 'Junio'),
        ('Julio', 'Julio'),
        ('Agosto', 'Agosto'),
        ('Septiembre', 'Septiembre'),
        ('Octubre', 'Octubre'),
        ('Noviembre', 'Noviembre'),
        ('Diciembre', 'Diciembre')
    ])
    year = forms.ChoiceField(label='Año')


    def __init__(self, *args, **kwargs):
        super(GenerarLiquidacionForm, self).__init__(*args, **kwargs)

        self.fields['valor_pagado_char'] = forms.CharField(label="Valor total de honorarios ejecutado ($)")
        try:
            valor_pagado = kwargs['instance'].valor_pagado
        except:
            pass

        self.fields['transporte_ejecutado_char'] = forms.CharField(label="Valor de reintegro de actividades ejecutado ($)")
        try:
            transporte_ejecutado = kwargs['instance'].transporte_ejecutado
        except:
            pass

        self.fields['valor_cancelado_char'] = forms.CharField(label="Valor total  cancelado ($)")
        try:
            valor_cancelado = kwargs['instance'].valor_cancelado
        except:
            pass

        self.fields['transporte_pagado_char'] = forms.CharField(label="Valor de reintegro de transporte pagado ($)")
        try:
            transporte_cancelado = kwargs['instance'].transporte_cancelado
        except:
            pass

        cuenta_cobro = models.CuentasCobro.objects.get(id=kwargs['initial']['pk_cuenta_cobro'])
        fecha = timezone.now()
        year = fecha.strftime('%Y')
        year_1 = str(int(year)-1)
        mes = fecha.strftime('%B').capitalize()

        self.fields['valores_inicial'].initial = cuenta_cobro.valores_json
        self.fields['year'].choices = [(year_1, year_1), (year, year)]


        if cuenta_cobro.data_json == '' or cuenta_cobro.data_json == None:
            self.fields['mes'].initial = mes

        else:
            self.fields['mes'].initial = json.loads(cuenta_cobro.data_json)['mes']
            self.fields['year'].initial = json.loads(cuenta_cobro.data_json)['year']

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Liquidación de contrato',
                )
            ),
            Row(
                HTML(
                    """
                    <div class="col s12">{{ cuentas| safe }}</div>
                    """
                )
            ),
            Row(
                HTML(
                    """
                    <div class="col s12 m6"><p><b>Contratista:</b> {{contratista}}</p></div>
                    <div class="col s12 m6"><p><b>Contrato:</b> {{contrato}}</p></div>
                    <div class="col s12 m6"><p><b>Inicio:</b> {{inicio}}</p></div>
                    <div class="col s12 m6"><p><b>Fin:</b> {{fin}}</p></div>
                    <div class="col s12 m6"><p><b>Valor:</b> {{valor_contrato}}</p></div>
                    """
                )
            ),
            Row(
                Fieldset(
                    'Valor de honorarios ejecutados',
                    css_class='s12'
                ),
            ),
            Row(
                Column(
                    'valor_pagado_char',
                    css_class='s12',
                ),
            ),
            Row(
                Fieldset(
                    'Valor total Honorarios pagado',
                    css_class='s12'
                ),
            ),
            Row(
                Column(
                    'valor_cancelado_char',
                    css_class='s12'
                )
            ),
            Row(
                Fieldset(
                    'Valor reintegro de actividades ejecutado',
                    css_class='s12'
                ),
            ),
            Row(
                Column(
                    'transporte_ejecutado_char',
                    css_class='s12',
                ),
            ),
            Row(
                Fieldset(
                    'Valor reintegro de actividades pagado',
                    css_class='s12'
                ),
            ),
            Row(
                Column(
                    'transporte_pagado_char',
                    css_class='s12',
                ),
            ),
            Row(
                Fieldset(
                    'Cuentas de cobro de Honorarios',
                    css_class='s6 m6 l4'
                ),
            ),
            Row(
                Column(
                    'mes',
                    css_class="s12 m6"
                ),
                Column(
                    'year',
                    css_class="s12 m6"
                ),
                Column(
                    HTML(
                        """
                        <div id="container_meses"></div>
                        """
                    ),
                    css_class="s12"
                ),
            ),
            Row(
                Column(
                    'valores',
                    'valores_inicial',
                    css_class = 's12'
                )
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

class LiquidacionesEstadoForm(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()

        estado = cleaned_data.get("estado")
        observaciones = cleaned_data.get("observaciones")

        if estado == 'Pendiente':
            if observaciones == None or observaciones == '':
                self.add_error('observaciones', 'Por favor escriba una observación')


    def __init__(self, *args, **kwargs):
        super(LiquidacionesEstadoForm, self).__init__(*args, **kwargs)

        self.fields['estado'].widget = forms.Select(choices = [
            ('','----------'),
            ('Reportada', 'Reportada'),
            ('Pendiente', 'Pendiente'),
            ('Pagada', 'Pagada')
        ])

        self.helper = FormHelper(self)
        self.helper.layout = Layout(

            Row(
                Fieldset(
                    'Cargar liquidación',
                )
            ),
            Row(
                Column(
                    'estado',
                    css_class="s12"
                ),
                Column(
                    'observaciones',
                    css_class="s12"
                ),
            ),
            Row(
                Column(
                    Div(
                        Submit(
                            'submit',
                            'Guardar',
                            css_class='button-submit'
                        ),
                        css_class="right-align"
                    ),
                    css_class="s12"
                ),
            )
        )

    class Meta:
        model = models.Liquidaciones
        fields = ['estado','observaciones']
        widgets = {
            'observaciones': forms.Textarea(attrs={'class': 'materialize-textarea'})
        }

class SoporteAudio3Form(forms.ModelForm):

    def clean(self):
        cleaned_data = super().clean()


    def __init__(self, *args, **kwargs):
        super(SoporteAudio3Form, self).__init__(*args, **kwargs)


        instrumento = models.Instrumentos.objects.get(id = kwargs['initial']['pk_instrumento'])



        if instrumento.nivel == 'ruta':


            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                 Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        elif instrumento.nivel == 'individual':
            self.fields['hogares'] = forms.ModelChoiceField(label = "Hogar",queryset = models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:

                instrumento_object = models.InstrumentosRutaObject.objects.get(id = kwargs['initial']['pk_instrumento_object'])

                try:
                    self.fields['hogares'].initial = instrumento_object.hogares.all()[0]
                except:
                    pass

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )

        else:
            self.fields['hogares'] = forms.ModelMultipleChoiceField(queryset=models.Hogares.objects.filter(rutas=kwargs['initial']['pk_ruta']))

            if 'pk_instrumento_object' in kwargs['initial']:
                instrumento_object = models.InstrumentosRutaObject.objects.get(id=kwargs['initial']['pk_instrumento_object'])

                self.fields['hogares'].initial = instrumento_object.hogares.all()

            self.helper = FormHelper(self)
            self.helper.layout = Layout(

                Row(
                    Fieldset(
                        kwargs['initial'].get('short_name'),
                    )
                ),
                Row(
                    Fieldset(
                        'Soporte:',
                    )
                ),
                Row(
                    Column(
                        'foto1',
                        css_class='s12'
                    )
                ),
                Row(
                    Fieldset(
                        'Audio Llamada Realizada:',
                    )
                ),
                Row(
                    Column(
                        'audio1',
                        css_class='s6'
                    ),
                    Column(
                        'audio2',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'audio3',
                        css_class='s6'
                    )
                ),
                Row(
                    Column(
                        'hogares',
                        css_class='s12'
                    )
                ),
                Row(
                    Column(
                        Div(
                            Submit(
                                'submit',
                                'Guardar',
                                css_class='button-submit'
                            ),
                            css_class="right-align"
                        ),
                        css_class="s12"
                    ),
                )
            )


    class Meta:
        model = models.SoporteAudio3
        fields = ['foto1','audio1','audio2','audio3']
        widgets = {
            'foto1': forms.ClearableFileInput(attrs={'accept': 'image/jpg,image/jpeg,image/png'}),

            'audio1': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3'}),

            'audio2': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3'}),

            'audio3': forms.ClearableFileInput(attrs={
                'data-max-file-size': "50M",
                'accept': 'audio/wav,audio/mpeg,audio/mp3'}),

        }
        labels = {
            'foto1': 'Foto 1',
            'audio1': 'Audio 1',
            'audio2': 'Audio 2',
            'audio3': 'Audio 3'
        }
